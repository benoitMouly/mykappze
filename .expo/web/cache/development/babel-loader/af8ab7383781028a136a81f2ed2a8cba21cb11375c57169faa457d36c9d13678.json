{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getFirestore, collection, where, query, getDocs, addDoc, updateDoc, deleteDoc, getDoc, doc } from 'firebase/firestore';\nimport { fetchSectors } from \"../sectors/sectorSlice\";\nexport var fetchCities = createAsyncThunk('cities/fetchCities', function () {\n  var _ref = _asyncToGenerator(function* (associationId) {\n    var db = getFirestore();\n    var q = query(collection(db, 'cities'), where('associationId', '==', associationId));\n    var querySnapshot = yield getDocs(q);\n    var citiesData = [];\n    querySnapshot.forEach(function (doc) {\n      citiesData.push(_objectSpread({\n        id: doc.id\n      }, doc.data()));\n    });\n    return citiesData;\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport var fetchAllSectors = function () {\n  var _ref2 = _asyncToGenerator(function* (cities, dispatch) {\n    var allSectors = [];\n    for (var city of cities) {\n      var sectorsAction = yield dispatch(fetchSectors(city.id));\n      var sectors = sectorsAction.payload;\n      allSectors.push.apply(allSectors, _toConsumableArray(sectors));\n    }\n    return allSectors;\n  });\n  return function fetchAllSectors(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var addCity = createAsyncThunk('cities/addCity', function () {\n  var _ref4 = _asyncToGenerator(function* (associationData, _ref3) {\n    var rejectWithValue = _ref3.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var associationRef = collection(db, 'cities');\n      var newAssociationRef = yield addDoc(associationRef, associationData);\n      var newcitiesnapshot = yield getDoc(newAssociationRef);\n      var newAssociation = _objectSpread({\n        id: newAssociationRef.id\n      }, newcitiesnapshot.data());\n      return newAssociation;\n    } catch (error) {\n      console.log('OH MON DIEU');\n      console.log(error);\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x4, _x5) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nexport var updateCity = createAsyncThunk('cities/updateCity', function () {\n  var _ref6 = _asyncToGenerator(function* (cityData, _ref5) {\n    var rejectWithValue = _ref5.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var cityRef = doc(db, 'cities', cityData.id);\n      yield updateDoc(cityRef, cityData);\n      var updatedCitySnapshot = yield getDoc(cityRef);\n      var updatedCity = _objectSpread({\n        id: updatedCitySnapshot.id\n      }, updatedCitySnapshot.data());\n      return updatedCity;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x6, _x7) {\n    return _ref6.apply(this, arguments);\n  };\n}());\nexport var deleteCity = createAsyncThunk('cities/deleteSector', function () {\n  var _ref8 = _asyncToGenerator(function* (cityId, _ref7) {\n    var rejectWithValue = _ref7.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var sectorRef = doc(db, 'cities', cityId);\n      var citySnapshot = yield getDoc(sectorRef);\n      var cityData = _objectSpread({\n        id: citySnapshot.id\n      }, citySnapshot.data());\n      yield deleteDoc(sectorRef);\n      return cityData;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x8, _x9) {\n    return _ref8.apply(this, arguments);\n  };\n}());\nvar citiesSlice = createSlice({\n  name: 'cities',\n  initialState: {\n    status: 'idle',\n    data: [],\n    error: null\n  },\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchCities.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(fetchCities.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = action.payload;\n    }).addCase(fetchCities.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addCity.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(addCity.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data.push(action.payload);\n    }).addCase(addCity.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(updateCity.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(updateCity.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      var updatedCityIndex = state.data.findIndex(function (city) {\n        return city.id === action.payload.id;\n      });\n      if (updatedCityIndex >= 0) {\n        state.data[updatedCityIndex] = action.payload;\n      }\n    }).addCase(updateCity.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default citiesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getFirestore","collection","where","query","getDocs","addDoc","updateDoc","deleteDoc","getDoc","doc","fetchSectors","fetchCities","_ref","_asyncToGenerator","associationId","db","q","querySnapshot","citiesData","forEach","push","_objectSpread","id","data","_x","apply","arguments","fetchAllSectors","_ref2","cities","dispatch","allSectors","city","sectorsAction","sectors","payload","_toConsumableArray","_x2","_x3","addCity","_ref4","associationData","_ref3","rejectWithValue","associationRef","newAssociationRef","newcitiesnapshot","newAssociation","error","console","log","message","_x4","_x5","updateCity","_ref6","cityData","_ref5","cityRef","updatedCitySnapshot","updatedCity","_x6","_x7","deleteCity","_ref8","cityId","_ref7","sectorRef","citySnapshot","_x8","_x9","citiesSlice","name","initialState","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","rejected","updatedCityIndex","findIndex","reducer"],"sources":["C:/Users/Benoitm/Documents/Coding/Kappze/MyKappze/src/features/cities/citySlice.tsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { getFirestore, collection, where, query, getDocs, addDoc, updateDoc, deleteDoc, getDoc, doc } from 'firebase/firestore';\r\nimport { fetchSectors } from '../sectors/sectorSlice';\r\nimport { useAppDispatch } from \"../../store/store\";\r\n\r\n/*\r\n* Fetch cities\r\n***    \r\n*/\r\n\r\n// export const fetchCities = createAsyncThunk<\r\n// { associationId: string }\r\n// >('cities/fetchCities', async (associationId) => {\r\n//     const db = getFirestore();\r\n//     const q = query(collection(db, 'cities'), where('associationId', '==', associationId));\r\n//     const querySnapshot = await getDocs(q);\r\n//     const citiesData = [];\r\n//     querySnapshot.forEach((doc) => {\r\n//         citiesData.push({ id: doc.id, ...doc.data() });\r\n//     });\r\n//     return citiesData;\r\n// });\r\n\r\n\r\n\r\n\r\n// Définir le type de chaque ville\r\ninterface City {\r\n  id: string;\r\n  associationId: string;\r\n  // Inclure ici d'autres propriétés de la ville si nécessaire\r\n}\r\n\r\nexport const fetchCities = createAsyncThunk<\r\n  City[], // Le type de la valeur de retour de la promesse\r\n  string, // Le type du payload\r\n  {} // Le type des informations de rejet si la promesse est rejetée\r\n>('cities/fetchCities', async (associationId) => {\r\n  const db = getFirestore();\r\n//   console.log(associationId)\r\n  const q = query(collection(db, 'cities'), where('associationId', '==', associationId));\r\n  const querySnapshot = await getDocs(q);\r\n  const citiesData: City[] = [];\r\n  querySnapshot.forEach((doc) => {\r\n    citiesData.push({ id: doc.id, ...doc.data() } as City);\r\n  });\r\n  return citiesData;\r\n});\r\n\r\n/*\r\n* Fetch sectors from cities\r\n***    \r\n*/\r\n\r\nexport const fetchAllSectors = async (cities, dispatch) => {\r\n    const allSectors = [];\r\n    // const dispatch = useAppDispatch();\r\n\r\n    for (const city of cities) {\r\n        // console.log(city.id)\r\n        const sectorsAction = await dispatch(fetchSectors(city.id));\r\n        const sectors = sectorsAction.payload; // unwrap the result of the dispatched action\r\n        allSectors.push(...sectors);\r\n    }\r\n\r\n    // console.log('ALL SECTORS : ')\r\n    // console.log(allSectors)\r\n\r\n    return allSectors;\r\n};\r\n\r\n\r\n\r\n/*\r\n* Create city\r\n***    \r\n*/\r\n\r\nexport const addCity = createAsyncThunk(\r\n    'cities/addCity',\r\n    async (associationData, { rejectWithValue }) => {\r\n\r\n        // console.log('ASSOCIATION DATA : ')\r\n        // console.log(associationData)\r\n        try {\r\n            const db = getFirestore();\r\n            const associationRef = collection(db, 'cities');\r\n            const newAssociationRef = await addDoc(associationRef, associationData);\r\n            const newcitiesnapshot = await getDoc(newAssociationRef);\r\n            const newAssociation = { id: newAssociationRef.id, ...newcitiesnapshot.data() };\r\n            // console.log('OK ON EST BON')\r\n            // console.log(newAssociation)\r\n            return newAssociation;\r\n        } catch (error) {\r\n            console.log('OH MON DIEU')\r\n            console.log(error)\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n/*\r\n* Update city\r\n***    \r\n*/\r\n\r\nexport const updateCity = createAsyncThunk(\r\n    'cities/updateCity',\r\n    async (cityData, { rejectWithValue }) => {\r\n        try {\r\n            const db = getFirestore();\r\n            const cityRef = doc(db, 'cities', cityData.id);\r\n            await updateDoc(cityRef, cityData);\r\n            const updatedCitySnapshot = await getDoc(cityRef);\r\n            const updatedCity = { id: updatedCitySnapshot.id, ...updatedCitySnapshot.data() };\r\n            return updatedCity;\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n\r\n/*\r\n* Delete sector\r\n***    \r\n*/\r\n\r\nexport const deleteCity = createAsyncThunk(\r\n    'cities/deleteSector',\r\n    async (cityId, { rejectWithValue }) => {\r\n        try {\r\n            const db = getFirestore();\r\n            const sectorRef = doc(db, 'cities', cityId);\r\n            const citySnapshot = await getDoc(sectorRef);\r\n            const cityData = { id: citySnapshot.id, ...citySnapshot.data() };\r\n            await deleteDoc(sectorRef);\r\n            return cityData;\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n/*\r\n* * * City slice\r\n***    \r\n*/\r\n\r\nconst citiesSlice = createSlice({\r\n    name: 'cities',\r\n    initialState: {\r\n        status: 'idle',\r\n        data: [],\r\n        error: null,\r\n    },\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchCities.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(fetchCities.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = action.payload;\r\n            })\r\n            .addCase(fetchCities.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.error.message;\r\n            })\r\n            .addCase(addCity.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(addCity.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data.push(action.payload);\r\n            })\r\n            .addCase(addCity.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            })\r\n            .addCase(updateCity.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(updateCity.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                const updatedCityIndex = state.data.findIndex((city) => city.id === action.payload.id);\r\n                if (updatedCityIndex >= 0) {\r\n                    state.data[updatedCityIndex] = action.payload;\r\n                }\r\n            })\r\n            .addCase(updateCity.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.error.message;\r\n            });\r\n    },\r\n});\r\n\r\nexport default citiesSlice.reducer;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}