{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getFirestore, collection, query, orderBy, limit, getDocs, where } from 'firebase/firestore';\nvar fetchNotifications = createAsyncThunk('notifications/fetchNotifications', function () {\n  var _ref2 = _asyncToGenerator(function* (_, _ref) {\n    var rejectWithValue = _ref.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var notificationsRef = collection(db, 'notifications');\n      var oneMonthAgo = new Date();\n      oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\n      var q = query(notificationsRef, where('date', '>=', oneMonthAgo), orderBy('date', 'desc'), limit(20));\n      var querySnapshot = yield getDocs(q);\n      var notifications = [];\n      querySnapshot.forEach(function (doc) {\n        notifications.push(doc.data());\n      });\n      return notifications;\n    } catch (error) {\n      return rejectWithValue(error.toString());\n    }\n  });\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nvar notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState: {\n    items: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchNotifications.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(fetchNotifications.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.items = action.payload;\n    }).addCase(fetchNotifications.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport { fetchNotifications };\nexport default notificationsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getFirestore","collection","query","orderBy","limit","getDocs","where","fetchNotifications","_ref2","_asyncToGenerator","_","_ref","rejectWithValue","db","notificationsRef","oneMonthAgo","Date","setMonth","getMonth","q","querySnapshot","notifications","forEach","doc","push","data","error","toString","_x","_x2","apply","arguments","notificationsSlice","name","initialState","items","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["C:/Users/Benoitm/Documents/Coding/Kappze/MyKappze/src/features/notifications/notificationSlice.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { getFirestore, collection, query, orderBy, limit, getDocs, where } from 'firebase/firestore';\r\n\r\nconst fetchNotifications = createAsyncThunk(\r\n  'notifications/fetchNotifications',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const db = getFirestore();\r\n      const notificationsRef = collection(db, 'notifications');\r\n      const oneMonthAgo = new Date();\r\n      oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\r\n      \r\n      const q = query(notificationsRef, where('date', '>=', oneMonthAgo), orderBy('date', 'desc'), limit(20));\r\n      const querySnapshot = await getDocs(q);\r\n      \r\n      const notifications = [];\r\n      querySnapshot.forEach((doc) => {\r\n        notifications.push(doc.data());\r\n      });\r\n      \r\n      return notifications;\r\n    } catch (error) {\r\n      return rejectWithValue(error.toString());\r\n    }\r\n  }\r\n);\r\n\r\nconst notificationsSlice = createSlice({\r\n  name: 'notifications',\r\n  initialState: { items: [], status: 'idle', error: null },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchNotifications.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchNotifications.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        // Add notifications to the state array\r\n        state.items = action.payload;\r\n      })\r\n      .addCase(fetchNotifications.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport { fetchNotifications };\r\nexport default notificationsSlice.reducer;"],"mappings":";AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,YAAY,EAAEC,UAAU,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,QAAQ,oBAAoB;AAEpG,IAAMC,kBAAkB,GAAGT,gBAAgB,CACzC,kCAAkC;EAAA,IAAAU,KAAA,GAAAC,iBAAA,CAClC,WAAOC,CAAC,EAAAC,IAAA,EAA0B;IAAA,IAAtBC,eAAe,GAAAD,IAAA,CAAfC,eAAe;IACzB,IAAI;MACF,IAAMC,EAAE,GAAGb,YAAY,CAAC,CAAC;MACzB,IAAMc,gBAAgB,GAAGb,UAAU,CAACY,EAAE,EAAE,eAAe,CAAC;MACxD,IAAME,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;MAC9BD,WAAW,CAACE,QAAQ,CAACF,WAAW,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAEhD,IAAMC,CAAC,GAAGjB,KAAK,CAACY,gBAAgB,EAAER,KAAK,CAAC,MAAM,EAAE,IAAI,EAAES,WAAW,CAAC,EAAEZ,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,EAAEC,KAAK,CAAC,EAAE,CAAC,CAAC;MACvG,IAAMgB,aAAa,SAASf,OAAO,CAACc,CAAC,CAAC;MAEtC,IAAME,aAAa,GAAG,EAAE;MACxBD,aAAa,CAACE,OAAO,CAAC,UAACC,GAAG,EAAK;QAC7BF,aAAa,CAACG,IAAI,CAACD,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC;MAChC,CAAC,CAAC;MAEF,OAAOJ,aAAa;IACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd,OAAOd,eAAe,CAACc,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC;IAC1C;EACF,CAAC;EAAA,iBAAAC,EAAA,EAAAC,GAAA;IAAA,OAAArB,KAAA,CAAAsB,KAAA,OAAAC,SAAA;EAAA;AAAA,GACH,CAAC;AAED,IAAMC,kBAAkB,GAAGjC,WAAW,CAAC;EACrCkC,IAAI,EAAE,eAAe;EACrBC,YAAY,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE,MAAM;IAAEV,KAAK,EAAE;EAAK,CAAC;EACxDW,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAE,SAAAA,cAACC,OAAO,EAAK;IAC1BA,OAAO,CACJC,OAAO,CAACjC,kBAAkB,CAACkC,OAAO,EAAE,UAACC,KAAK,EAAK;MAC9CA,KAAK,CAACN,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDI,OAAO,CAACjC,kBAAkB,CAACoC,SAAS,EAAE,UAACD,KAAK,EAAEE,MAAM,EAAK;MACxDF,KAAK,CAACN,MAAM,GAAG,WAAW;MAE1BM,KAAK,CAACP,KAAK,GAAGS,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACjC,kBAAkB,CAACuC,QAAQ,EAAE,UAACJ,KAAK,EAAEE,MAAM,EAAK;MACvDF,KAAK,CAACN,MAAM,GAAG,QAAQ;MACvBM,KAAK,CAAChB,KAAK,GAAGkB,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,SAAStC,kBAAkB;AAC3B,eAAeyB,kBAAkB,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}