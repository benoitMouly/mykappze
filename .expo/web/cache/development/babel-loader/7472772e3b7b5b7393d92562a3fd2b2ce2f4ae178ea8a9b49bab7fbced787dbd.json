{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport * as Location from \"expo-location\";\nimport { getDistanceFromLatLonInKm } from \"../utils/getDistance\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Veterinaires = function Veterinaires() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    vets = _useState2[0],\n    setVets = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    msg = _useState4[0],\n    setErrorMsg = _useState4[1];\n  var daysOfWeek = [\"Dimanche\", \"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\", \"Samedi\"];\n  var convertPeriodsToOpeningHours = function convertPeriodsToOpeningHours(periods) {\n    if (!periods) return [\"Non disponible\"];\n    var hoursForDays = {};\n    periods.forEach(function (period) {\n      var day = daysOfWeek[period.open.day];\n      var openTime = `${period.open.time.slice(0, 2)}:${period.open.time.slice(2)}`;\n      var closeTime = `${period.close.time.slice(0, 2)}:${period.close.time.slice(2)}`;\n      hoursForDays[day] = hoursForDays[day] ? [].concat(_toConsumableArray(hoursForDays[day]), [`${openTime} - ${closeTime}`]) : [`${openTime} - ${closeTime}`];\n    });\n    return Object.entries(hoursForDays).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        day = _ref2[0],\n        hours = _ref2[1];\n      return `${day}: ${hours.join(\", \")}`;\n    });\n  };\n  useEffect(function () {\n    fetchLocation();\n  }, []);\n  var fetchLocation = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      var _yield$Location$reque = yield Location.requestForegroundPermissionsAsync(),\n        status = _yield$Location$reque.status;\n      if (status !== \"granted\") {\n        setErrorMsg(\"Permission to access location was denied\");\n        return;\n      }\n      var location = yield Location.getCurrentPositionAsync({});\n      var _location$coords = location.coords,\n        latitude = _location$coords.latitude,\n        longitude = _location$coords.longitude;\n      fetchVets(latitude, longitude);\n    });\n    return function fetchLocation() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var fetchVets = function () {\n    var _ref4 = _asyncToGenerator(function* (latitude, longitude) {\n      try {\n        var response = yield fetch(\"https://us-central1-kappze.cloudfunctions.net/getNearbyVets\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            latitude: latitude,\n            longitude: longitude\n          })\n        });\n        if (!response.ok) {\n          throw new Error('HTTP error ' + response.status);\n        }\n        var res = yield response.json();\n        console.log(res);\n        var data = res.results.map(function (place) {\n          var _place$opening_hours;\n          var distance = getDistanceFromLatLonInKm(latitude, longitude, place.geometry.location.lat, place.geometry.location.lng);\n          var hours = convertPeriodsToOpeningHours((_place$opening_hours = place.opening_hours) == null ? void 0 : _place$opening_hours.periods);\n          return {\n            name: place.name,\n            distance: Math.round(distance * 100) / 100,\n            hours: hours\n          };\n        });\n        setVets(data);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n    return function fetchVets(_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  console.log(vets);\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    children: [_jsx(Text, {\n      children: \"V\\xE9t\\xE9rinaires \\xE0 proximit\\xE9 :\"\n    }), _jsx(FlatList, {\n      data: vets,\n      keyExtractor: function keyExtractor(item, index) {\n        return index.toString();\n      },\n      renderItem: function renderItem(_ref5) {\n        var item = _ref5.item;\n        return _jsxs(View, {\n          children: [_jsxs(Text, {\n            children: [\"Nom : \", item.name]\n          }), _jsxs(Text, {\n            children: [\"Distance : \", item.distance, \" km\"]\n          }), _jsxs(Text, {\n            children: [\"Heures : \", item.hours.join(', ')]\n          })]\n        });\n      }\n    })]\n  });\n};\nexport default Veterinaires;","map":{"version":3,"names":["React","useEffect","useState","Text","View","FlatList","Location","getDistanceFromLatLonInKm","jsx","_jsx","jsxs","_jsxs","Veterinaires","_useState","_useState2","_slicedToArray","vets","setVets","_useState3","_useState4","msg","setErrorMsg","daysOfWeek","convertPeriodsToOpeningHours","periods","hoursForDays","forEach","period","day","open","openTime","time","slice","closeTime","close","concat","_toConsumableArray","Object","entries","map","_ref","_ref2","hours","join","fetchLocation","_ref3","_asyncToGenerator","_yield$Location$reque","requestForegroundPermissionsAsync","status","location","getCurrentPositionAsync","_location$coords","coords","latitude","longitude","fetchVets","apply","arguments","_ref4","response","fetch","method","headers","body","JSON","stringify","ok","Error","res","json","console","log","data","results","place","_place$opening_hours","distance","geometry","lat","lng","opening_hours","name","Math","round","e","error","_x","_x2","style","flex","justifyContent","alignItems","children","keyExtractor","item","index","toString","renderItem","_ref5"],"sources":["C:/Users/Benoitm/Documents/Coding/Kappze/MyKappze/src/pages/NearbyVet.tsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { Text, View, FlatList, Platform } from \"react-native\";\r\n// import Geolocation from \"react-native-geolocation-service\";\r\n// import functions from \"@react-native-firebase/functions\";\r\n// import { format, parse } from 'date-fns';\r\n// import * as Location from \"expo-location\";\r\n// import { getDistanceFromLatLonInKm } from \"../utils/getDistance\";\r\n\r\n// interface Vet {\r\n//   name: string;\r\n//   distance: number;\r\n//   hours: string[];\r\n// }\r\n\r\n// const Veterinaires = () => {\r\n//   const [vets, setVets] = useState<Vet[]>([]);\r\n//   const [msg, setErrorMsg] = useState(\"\");\r\n\r\n// // fonction pour convertir le format d'heure\r\n// // Function to convert time to 24 hours format\r\n// const convertTo24HourFormat = (timeString) => {\r\n//     if (!timeString || timeString === \"Closed\" || timeString === \"Open 24 hours\") {\r\n//       return timeString;\r\n//     }\r\n  \r\n//     // Remplacer les caractères non standard par des caractères standard\r\n//     const cleanedTimeString = timeString.replace(' ', ' ').replace('–', '*');\r\n    \r\n//     try {\r\n//       const [startTime, endTime] = cleanedTimeString.split(\"*\");\r\n    \r\n//       // Utiliser date-fns pour convertir le format de l'heure\r\n//       const startTime24 = format(parse(startTime.trim(), \"h:mm a\", new Date()), \"HH:mm\");\r\n//       const endTime24 = format(parse(endTime.trim(), \"h:mm a\", new Date()), \"HH:mm\");\r\n     \r\n\r\n    \r\n//       return `${startTime24} - ${endTime24}`;\r\n//     } catch (error) {\r\n//         console.log(\"Attempting to convert:\", timeString); // Add this line\r\n//       console.error(\"Error while converting time:\", error);\r\n//       return timeString; // Si la conversion échoue, retourner la chaîne originale\r\n//     }\r\n//   };\r\n  \r\n  \r\n\r\n  \r\n//   // Function to translate weekday to French\r\n//   const translateDayOfWeek = (day) => {\r\n//     const daysOfWeek = {\r\n//       \"Monday\": \"Lundi\",\r\n//       \"Tuesday\": \"Mardi\",\r\n//       \"Wednesday\": \"Mercredi\",\r\n//       \"Thursday\": \"Jeudi\",\r\n//       \"Friday\": \"Vendredi\",\r\n//       \"Saturday\": \"Samedi\",\r\n//       \"Sunday\": \"Dimanche\"\r\n//     };\r\n//     return daysOfWeek[day] || day;\r\n//   };\r\n  \r\n//   // Function to translate opening hours\r\n//   const translateOpeningHours = (opening_hours) => {\r\n//     if (!opening_hours) return [\"Non disponible\"];\r\n  \r\n//     const translatedHours = opening_hours.flatMap((hour) => {\r\n//       const [day, times] = hour.split(\": \");\r\n//       const translatedDay = translateDayOfWeek(day);\r\n  \r\n//       // Handle multiple time ranges in a single day\r\n//       const timeRanges = times.split(\", \");\r\n//       return timeRanges.map((timeRange) => {\r\n//         if (timeRange === \"Closed\") return `${translatedDay}: Fermé`;\r\n  \r\n//         const [startTime, endTime] = timeRange.split(\" – \");\r\n//         const startTime24 = convertTo24HourFormat(startTime);\r\n//         const endTime24 = convertTo24HourFormat(endTime);\r\n//         return `${translatedDay}: ${startTime24} - ${endTime24}`;\r\n//       });\r\n//     });\r\n  \r\n//     return translatedHours;\r\n//   };\r\n  \r\n  \r\n//   useEffect(() => {\r\n//     fetchLocation();\r\n//   }, []);\r\n\r\n//   const fetchLocation = async () => {\r\n//     let { status } = await Location.requestForegroundPermissionsAsync();\r\n//     if (status !== \"granted\") {\r\n//       setErrorMsg(\"Permission to access location was denied\");\r\n//       return;\r\n//     }\r\n\r\n//     let location = await Location.getCurrentPositionAsync({});\r\n//     const { latitude, longitude } = location.coords;\r\n//     fetchVets(latitude, longitude);\r\n//   };\r\n\r\n//   const fetchVets = async (latitude: number, longitude: number) => {\r\n//     try {\r\n//       const response = await fetch(\r\n//         \"https://us-central1-kappze.cloudfunctions.net/getNearbyVets\",\r\n//         {\r\n//           method: \"POST\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify({ latitude, longitude }),\r\n//         }\r\n//       );\r\n  \r\n//       if (!response.ok) {\r\n//         throw new Error('HTTP error ' + response.status);\r\n//       }\r\n  \r\n//       const res = await response.json();\r\n\r\n//       console.log(res)\r\n  \r\n//       const data = res.results.map((place: any) => {\r\n//         const distance = getDistanceFromLatLonInKm(\r\n//           latitude,\r\n//           longitude,\r\n//           place.geometry.location.lat,\r\n//           place.geometry.location.lng\r\n//         );\r\n\r\n//         const hours = place.opening_hours?.weekday_text \r\n//         ? translateOpeningHours(place.opening_hours.weekday_text) \r\n//         : [\"Non disponible\"];\r\n\r\n//         return {\r\n//           name: place.name,\r\n//           distance: Math.round(distance * 100) / 100, \r\n//           hours: place.opening_hours?.open_now ? \"Ouvert maintenant\" : \"Fermé\",\r\n//           openingHours: hours,\r\n//         };\r\n//       });\r\n  \r\n//       setVets(data);\r\n//     } catch (e) {\r\n//       console.error(e);\r\n//     }\r\n//   };\r\n\r\n\r\n//   return (\r\n//     <View>\r\n//       <FlatList\r\n//         data={vets}\r\n//         keyExtractor={(item) => item.name}\r\n//         renderItem={({ item }) => (\r\n//           <View style={{ backgroundColor: \"white\" }}>\r\n//             <Text>Nom: {item.name}</Text>\r\n//             <Text>Distance: {item.distance} km</Text>\r\n//             <Text>Horaires:</Text>\r\n//             <Text>{item.hours}</Text>\r\n//       {item.openingHours.map((hour, index) => (\r\n//         <Text key={index}>{hour}</Text>\r\n//       ))}\r\n//           </View>\r\n//         )}\r\n//       />\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n// export default Veterinaires;\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Text, View, FlatList, Platform } from \"react-native\";\r\n// import Geolocation from \"react-native-geolocation-service\";\r\n// import functions from \"@react-native-firebase/functions\";\r\nimport * as Location from \"expo-location\";\r\nimport { getDistanceFromLatLonInKm } from \"../utils/getDistance\";\r\n\r\ninterface Vet {\r\n  name: string;\r\n  distance: number;\r\n  hours: string[];\r\n}\r\n\r\nconst Veterinaires = () => {\r\n  const [vets, setVets] = useState<Vet[]>([]);\r\n  const [msg, setErrorMsg] = useState(\"\");\r\n\r\n  const daysOfWeek = [\"Dimanche\", \"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\", \"Samedi\"];\r\n\r\n  const convertPeriodsToOpeningHours = (periods) => {\r\n    if (!periods) return [\"Non disponible\"];\r\n    \r\n    let hoursForDays = {};\r\n  \r\n    periods.forEach(period => {\r\n      const day = daysOfWeek[period.open.day];\r\n      \r\n      const openTime = `${period.open.time.slice(0, 2)}:${period.open.time.slice(2)}`;\r\n      const closeTime = `${period.close.time.slice(0, 2)}:${period.close.time.slice(2)}`;\r\n  \r\n      // If there's already an opening period for the day, add this one to it, otherwise create a new one\r\n      hoursForDays[day] = hoursForDays[day] ? [...hoursForDays[day], `${openTime} - ${closeTime}`] : [`${openTime} - ${closeTime}`];\r\n    });\r\n  \r\n    return Object.entries(hoursForDays).map(([day, hours]) => {\r\n      return `${day}: ${hours.join(\", \")}`;\r\n    });\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    fetchLocation();\r\n  }, []);\r\n\r\n  const fetchLocation = async () => {\r\n    let { status } = await Location.requestForegroundPermissionsAsync();\r\n    if (status !== \"granted\") {\r\n      setErrorMsg(\"Permission to access location was denied\");\r\n      return;\r\n    }\r\n\r\n    let location = await Location.getCurrentPositionAsync({});\r\n    const { latitude, longitude } = location.coords;\r\n    fetchVets(latitude, longitude);\r\n  };\r\n\r\n  const fetchVets = async (latitude: number, longitude: number) => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://us-central1-kappze.cloudfunctions.net/getNearbyVets\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ latitude, longitude }),\r\n        }\r\n      );\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('HTTP error ' + response.status);\r\n      }\r\n  \r\n      const res = await response.json();\r\n      console.log(res)\r\n  \r\n      const data = res.results.map((place: any) => {\r\n        const distance = getDistanceFromLatLonInKm(\r\n          latitude,\r\n          longitude,\r\n          place.geometry.location.lat,\r\n          place.geometry.location.lng\r\n        );\r\n\r\n        const hours = convertPeriodsToOpeningHours(place.opening_hours?.periods);\r\n        \r\n        return {\r\n          name: place.name,\r\n          distance: Math.round(distance * 100) / 100, // Round to 2 decimal places\r\n          hours: hours,\r\n        };\r\n      });\r\n  \r\n      setVets(data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  console.log(vets)\r\n\r\n  return (\r\n    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n      <Text>Vétérinaires à proximité :</Text>\r\n      <FlatList\r\n        data={vets}\r\n        keyExtractor={(item, index) => index.toString()}\r\n        renderItem={({ item }) => (\r\n          <View>\r\n            <Text>Nom : {item.name}</Text>\r\n            <Text>Distance : {item.distance} km</Text>\r\n            <Text>Heures : {item.hours.join(', ')}</Text>\r\n          </View>\r\n        )}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Veterinaires;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}