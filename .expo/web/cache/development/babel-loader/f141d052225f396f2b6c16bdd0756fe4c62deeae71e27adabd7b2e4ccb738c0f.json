{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useEffect, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { store } from \"./src/store/store\";\nimport * as Font from \"expo-font\";\nimport \"./src/firebaseConfig\";\nimport AppNavigator from \"./src/AppNavigator\";\nimport * as Notifications from 'expo-notifications';\nimport * as Device from 'expo-device';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function registerForPushNotificationsAsync() {\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nfunction _registerForPushNotificationsAsync() {\n  _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n    var token;\n    try {\n      if (Platform.OS === 'android') {\n        yield Notifications.setNotificationChannelAsync('default', {\n          name: 'default',\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: '#FF231F7C'\n        });\n      }\n      if (Device.isDevice) {\n        var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n          existingStatus = _yield$Notifications$.status;\n        var finalStatus = existingStatus;\n        if (existingStatus !== 'granted') {\n          var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n            status = _yield$Notifications$2.status;\n          finalStatus = status;\n        }\n        if (finalStatus !== 'granted') {\n          alert('Failed to get push token for push notification!');\n          return;\n        }\n        token = (yield Notifications.getExpoPushTokenAsync()).data;\n        console.log(token);\n      } else {\n        alert('Must use physical device for Push Notifications');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    return token;\n  });\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    fontsLoaded = _useState2[0],\n    setFontsLoaded = _useState2[1];\n  var loadFonts = function () {\n    var _ref = _asyncToGenerator(function* () {\n      yield Font.loadAsync({\n        \"WixMadeforDisplay-Regular\": require(\"./src/assets/fonts/WixMadeforDisplay-Regular.ttf\"),\n        \"WixMadeforDisplay-Bold\": require(\"./src/assets/fonts/WixMadeforDisplay-Bold.otf\")\n      });\n      setFontsLoaded(true);\n    });\n    return function loadFonts() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    loadFonts();\n  }, []);\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return console.log(token);\n    });\n  }, []);\n  return _jsx(SafeAreaProvider, {\n    children: _jsx(Provider, {\n      store: store,\n      children: _jsx(AppNavigator, {})\n    })\n  });\n}","map":{"version":3,"names":["React","useEffect","useState","Provider","SafeAreaProvider","store","Font","AppNavigator","Notifications","Device","Platform","jsx","_jsx","registerForPushNotificationsAsync","_registerForPushNotificationsAsync","apply","arguments","_asyncToGenerator","token","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","isDevice","_yield$Notifications$","getPermissionsAsync","existingStatus","status","finalStatus","_yield$Notifications$2","requestPermissionsAsync","alert","getExpoPushTokenAsync","data","console","log","error","App","_useState","_useState2","_slicedToArray","fontsLoaded","setFontsLoaded","loadFonts","_ref","loadAsync","require","then","children"],"sources":["C:/Users/Benoitm/Documents/Coding/Kappze/MyKappze/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport  { store } from './src/store/store';\nimport * as Font from \"expo-font\";\n// import LoginPage from './src/pages/LoginPage';\nimport  './src/firebaseConfig';  // Importez simplement votre configuration Firebase ici\nimport AppNavigator from './src/AppNavigator'\nimport * as Notifications from 'expo-notifications';\nimport * as Device from 'expo-device';\nimport Constants from 'expo-constants';\nimport { Platform } from 'react-native';\n\n\n\nexport async function registerForPushNotificationsAsync() {\n  let token;\n\n  try{\n    if (Platform.OS === 'android') {\n      await Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C',\n      });\n    }\n  \n    if (Device.isDevice) {\n      const { status: existingStatus } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const { status } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      token = (await Notifications.getExpoPushTokenAsync()).data;\n      console.log(token);\n    } else {\n      alert('Must use physical device for Push Notifications');\n    }\n  } catch(error){\n    console.log(error)\n  }\n\n\n  return token;\n}\n\nexport default function App() {\n\n  const [fontsLoaded, setFontsLoaded] = useState(false);\n\n\n\n  const loadFonts = async () => {\n    await Font.loadAsync({\n      // \"WixMadeforDisplay-Regular\": require(\"../../assets/fonts/WixMadeforDisplay-Regular.ttf\"),\n      // \"WixMadeforDisplay-Bold\": require(\"../../assets/fonts/WixMadeforDisplay-Bold.otf\"), // charge également la variante en gras\n      \"WixMadeforDisplay-Regular\": require(\"./src/assets/fonts/WixMadeforDisplay-Regular.ttf\"),\n      \"WixMadeforDisplay-Bold\": require(\"./src/assets/fonts/WixMadeforDisplay-Bold.otf\"), // charge également la variante en gras\n    });\n    setFontsLoaded(true);\n  };\n  \n  useEffect(() => {\n    loadFonts();\n  }, []);\n\n  // useEffect(() => {\n  //   registerForPushNotificationsAsync().then(token => console.log(token));\n\n  //   // When a notification is received when the app is open\n  //   const subscription = Notifications.addNotificationReceivedListener(notification => {\n  //     console.log(notification);\n  //   });\n\n  //   // When a user interacts with a notification (e.g. taps on it)\n  //   const responseSubscription = Notifications.addNotificationResponseReceivedListener(response => {\n  //     console.log(response);\n  //   });\n\n  //   return () => {\n  //     subscription.remove();\n  //     responseSubscription.remove();\n  //   };\n  // }, []);\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then(token => console.log(token));\n  }, []);\n\n  return (\n    <SafeAreaProvider>\n\n    <Provider store={store}>\n    <AppNavigator />\n    </Provider>\n\n    </SafeAreaProvider>\n  );\n}\n\n// export async function registerForPushNotificationsAsync() {\n//   let token;\n//   if (Constants.isDevice) {\n//     const { status: existingStatus } = await Notifications.getPermissionsAsync();\n//     let finalStatus = existingStatus;\n//     if (existingStatus !== 'granted') {\n//       const { status } = await Notifications.requestPermissionsAsync();\n//       finalStatus = status;\n//     }\n//     if (finalStatus !== 'granted') {\n//       alert('Failed to get push token for push notification!');\n//       return;\n//     }\n//     token = (await Notifications.getExpoPushTokenAsync()).data;\n//   } else {\n//     alert('Must use physical device for Push Notifications');\n//   }\n\n//   if (Platform.OS === 'android') {\n//     Notifications.setNotificationChannelAsync('default', {\n//       name: 'default',\n//       importance: Notifications.AndroidImportance.MAX,\n//       vibrationPattern: [0, 250, 250, 250],\n//       lightColor: '#FF231F7C',\n//     });\n//   }\n\n//   return token;\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}