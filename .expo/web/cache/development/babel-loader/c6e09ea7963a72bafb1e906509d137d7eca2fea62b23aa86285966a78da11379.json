{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getFirestore, collection, where, query, doc, getDocs, addDoc, getDoc, updateDoc, deleteDoc, writeBatch } from 'firebase/firestore';\nexport var fetchSectors = createAsyncThunk('sectors/fetchSectors', function () {\n  var _ref = _asyncToGenerator(function* (cityId) {\n    var db = getFirestore();\n    console.log('CITY ID SLICE : ', cityId);\n    var q = query(collection(db, 'sectors'), where('cityId', '==', cityId));\n    var querySnapshot = yield getDocs(q);\n    var sectorsData = [];\n    querySnapshot.forEach(function (doc) {\n      sectorsData.push(_objectSpread({\n        id: doc.id\n      }, doc.data()));\n    });\n    return sectorsData;\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport var fetchSectorById = createAsyncThunk('sectors/fetchSectorById', function () {\n  var _ref2 = _asyncToGenerator(function* (sectorId) {\n    var db = getFirestore();\n    var docRef = doc(db, 'sectors', sectorId);\n    var docSnap = yield getDoc(docRef);\n    if (docSnap.exists()) {\n      return _objectSpread({\n        id: docSnap.id\n      }, docSnap.data());\n    } else {\n      throw new Error(\"No such sector!\");\n    }\n  });\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport var addSector = createAsyncThunk('sectors/addSector', function () {\n  var _ref4 = _asyncToGenerator(function* (associationData, _ref3) {\n    var rejectWithValue = _ref3.rejectWithValue;\n    try {\n      console.log('ASSOCIATION DATAAA : ');\n      console.log(associationData);\n      var db = getFirestore();\n      var associationRef = collection(db, 'sectors');\n      var newAssociationRef = yield addDoc(associationRef, associationData);\n      var newsecteursnapshot = yield getDoc(newAssociationRef);\n      var newAssociation = _objectSpread({\n        id: newAssociationRef.id\n      }, newsecteursnapshot.data());\n      return newAssociation;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nexport var updateSector = createAsyncThunk('sectors/updateSector', function () {\n  var _ref6 = _asyncToGenerator(function* (associationData, _ref5) {\n    var rejectWithValue = _ref5.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var associationRef = doc(db, 'sectors', associationData.id);\n      yield updateDoc(associationRef, associationData);\n      var updatedSectorSnapshot = yield getDoc(associationRef);\n      var updatedSector = _objectSpread({\n        id: updatedSectorSnapshot.id\n      }, updatedSectorSnapshot.data());\n      return updatedSector;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x5, _x6) {\n    return _ref6.apply(this, arguments);\n  };\n}());\nexport var deleteSector = createAsyncThunk('sectors/deleteSector', function () {\n  var _ref8 = _asyncToGenerator(function* (sectorId, _ref7) {\n    var rejectWithValue = _ref7.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var sectorRef = doc(db, 'sectors', sectorId);\n      var sectorSnapshot = yield getDoc(sectorRef);\n      var sectorData = _objectSpread({\n        id: sectorSnapshot.id\n      }, sectorSnapshot.data());\n      yield deleteDoc(sectorRef);\n      return sectorData;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x7, _x8) {\n    return _ref8.apply(this, arguments);\n  };\n}());\nexport var removeCitySectors = createAsyncThunk('sectors/removeCitySectors', function () {\n  var _ref10 = _asyncToGenerator(function* (cityId, _ref9) {\n    var rejectWithValue = _ref9.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var q = query(collection(db, 'sectors'), where('cityId', '==', cityId));\n      var querySnapshot = yield getDocs(q);\n      var batch = writeBatch(db);\n      querySnapshot.forEach(function (sectorDoc) {\n        var sectorRef = doc(db, 'sectors', sectorDoc.id);\n        batch.delete(sectorRef);\n      });\n      yield batch.commit();\n      return cityId;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x9, _x10) {\n    return _ref10.apply(this, arguments);\n  };\n}());\nvar sectorsSlice = createSlice({\n  name: 'sectors',\n  initialState: {\n    status: 'idle',\n    data: [],\n    error: null\n  },\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchSectors.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(fetchSectors.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = action.payload;\n    }).addCase(fetchSectors.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchSectorById.fulfilled, function (state, action) {\n      state.data.push(action.payload);\n    }).addCase(addSector.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(addSector.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n    }).addCase(addSector.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(deleteSector.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = state.data.filter(function (sector) {\n        return sector.id !== action.payload.id;\n      });\n    }).addCase(deleteSector.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(updateSector.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      var index = state.data.findIndex(function (sector) {\n        return sector.id === action.payload.id;\n      });\n      if (index !== -1) {\n        state.data.splice(index, 1, action.payload);\n      }\n    }).addCase(updateSector.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(removeCitySectors.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = state.data.filter(function (sector) {\n        return sector.cityId !== action.payload;\n      });\n    });\n  }\n});\nexport default sectorsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getFirestore","collection","where","query","doc","getDocs","addDoc","getDoc","updateDoc","deleteDoc","writeBatch","fetchSectors","_ref","_asyncToGenerator","cityId","db","console","log","q","querySnapshot","sectorsData","forEach","push","_objectSpread","id","data","_x","apply","arguments","fetchSectorById","_ref2","sectorId","docRef","docSnap","exists","Error","_x2","addSector","_ref4","associationData","_ref3","rejectWithValue","associationRef","newAssociationRef","newsecteursnapshot","newAssociation","error","message","_x3","_x4","updateSector","_ref6","_ref5","updatedSectorSnapshot","updatedSector","_x5","_x6","deleteSector","_ref8","_ref7","sectorRef","sectorSnapshot","sectorData","_x7","_x8","removeCitySectors","_ref10","_ref9","batch","sectorDoc","delete","commit","_x9","_x10","sectorsSlice","name","initialState","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","filter","sector","index","findIndex","splice","reducer"],"sources":["C:/Users/Benoitm/Documents/Coding/Kappze/MyKappze/src/features/sectors/sectorSlice.tsx"],"sourcesContent":["import { createSlice, createAsyncThunk, createAction } from '@reduxjs/toolkit';\r\nimport { getFirestore, collection, where, query, doc, getDocs, addDoc, getDoc, updateDoc, deleteDoc, writeBatch } from 'firebase/firestore';\r\nimport { useDispatch } from 'react-redux';\r\n/*\r\n* Fetch sectors by city\r\n***    \r\n*/\r\n\r\nexport const fetchSectors = createAsyncThunk('sectors/fetchSectors', async (cityId) => {\r\n    const db = getFirestore();\r\n    console.log('CITY ID SLICE : ',  cityId);\r\n    const q = query(collection(db, 'sectors'), where('cityId', '==', cityId));\r\n    const querySnapshot = await getDocs(q);\r\n    const sectorsData = [];\r\n    querySnapshot.forEach((doc) => {\r\n        sectorsData.push({ id: doc.id, ...doc.data() });\r\n    });\r\n\r\n    return sectorsData;\r\n});\r\n\r\n\r\n\r\n/*\r\n* Fetch the sector by is id\r\n***\r\n*/\r\n\r\nexport const fetchSectorById = createAsyncThunk('sectors/fetchSectorById', async (sectorId) => {\r\n    const db = getFirestore();\r\n    // Utilisez doc pour créer une référence au document de secteur spécifique\r\n    const docRef = doc(db, 'sectors', sectorId);\r\n    const docSnap = await getDoc(docRef);\r\n\r\n    // S'il existe, renvoyez les données du document\r\n    if (docSnap.exists()) {\r\n        return { id: docSnap.id, ...docSnap.data() };\r\n    } else {\r\n        throw new Error(\"No such sector!\");\r\n    }\r\n});\r\n\r\n\r\n/*\r\n* Create sector\r\n***    \r\n*/\r\n\r\nexport const addSector = createAsyncThunk(\r\n    'sectors/addSector',\r\n    async (associationData, { rejectWithValue }) => {\r\n        try {\r\n\r\n            console.log('ASSOCIATION DATAAA : ' )\r\n            console.log(associationData);\r\n\r\n            const db = getFirestore();\r\n            const associationRef = collection(db, 'sectors');\r\n            const newAssociationRef = await addDoc(associationRef, associationData);\r\n            const newsecteursnapshot = await getDoc(newAssociationRef);\r\n            const newAssociation = { id: newAssociationRef.id, ...newsecteursnapshot.data() };\r\n            return newAssociation;\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n/*\r\n* Update sector\r\n***    \r\n*/\r\n\r\nexport const updateSector = createAsyncThunk(\r\n    'sectors/updateSector',\r\n    async (associationData, { rejectWithValue }) => {\r\n        try {\r\n            const db = getFirestore();\r\n            const associationRef = doc(db, 'sectors', associationData.id);\r\n            await updateDoc(associationRef, associationData);\r\n            const updatedSectorSnapshot = await getDoc(associationRef);\r\n            const updatedSector = { id: updatedSectorSnapshot.id, ...updatedSectorSnapshot.data() };\r\n            return updatedSector;\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n/*\r\n* Delete sector\r\n***    \r\n*/\r\n\r\nexport const deleteSector = createAsyncThunk(\r\n    'sectors/deleteSector',\r\n    async (sectorId, { rejectWithValue }) => {\r\n        try {\r\n            const db = getFirestore();\r\n            const sectorRef = doc(db, 'sectors', sectorId);\r\n            const sectorSnapshot = await getDoc(sectorRef);\r\n            const sectorData = { id: sectorSnapshot.id, ...sectorSnapshot.data() };\r\n            await deleteDoc(sectorRef);\r\n            return sectorData;\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\nexport const removeCitySectors = createAsyncThunk(\r\n    'sectors/removeCitySectors',\r\n    async (cityId, { rejectWithValue }) => {\r\n        try {\r\n            const db = getFirestore();\r\n            const q = query(collection(db, 'sectors'), where('cityId', '==', cityId));\r\n            const querySnapshot = await getDocs(q);\r\n\r\n            const batch = writeBatch(db);\r\n            querySnapshot.forEach((sectorDoc) => {\r\n                const sectorRef = doc(db, 'sectors', sectorDoc.id);\r\n                batch.delete(sectorRef);\r\n            });\r\n            await batch.commit();\r\n\r\n            // Return the cityId\r\n            return cityId;\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n\r\n/*\r\n* * * Sector slice\r\n***    \r\n*/\r\n\r\nconst sectorsSlice = createSlice({\r\n    name: 'sectors',\r\n    initialState: {\r\n        status: 'idle',\r\n        data: [],\r\n        error: null,\r\n    },\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchSectors.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(fetchSectors.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = action.payload;\r\n            })\r\n            .addCase(fetchSectors.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.error.message;\r\n            })\r\n            .addCase(fetchSectorById.fulfilled, (state, action) => {\r\n                // Ajoutez le nouveau secteur à votre state\r\n                state.data.push(action.payload);\r\n              })\r\n            .addCase(addSector.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(addSector.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                // state.data.push(action.payload);\r\n            })\r\n            .addCase(addSector.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            })\r\n            .addCase(deleteSector.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = state.data.filter(sector => sector.id !== action.payload.id);\r\n            })\r\n            .addCase(deleteSector.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            })\r\n            .addCase(updateSector.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                const index = state.data.findIndex(sector => sector.id === action.payload.id);\r\n                if (index !== -1) {\r\n                    state.data.splice(index, 1, action.payload);\r\n                }\r\n            })\r\n            .addCase(updateSector.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            })\r\n            .addCase(removeCitySectors.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = state.data.filter((sector) => sector.cityId !== action.payload);\r\n            });\r\n    },\r\n});\r\n\r\nexport default sectorsSlice.reducer;\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}