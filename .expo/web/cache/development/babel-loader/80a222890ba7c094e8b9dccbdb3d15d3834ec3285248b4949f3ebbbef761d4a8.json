{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getFirestore, collection, where, doc, query, getDocs, addDoc, getDoc, deleteDoc, writeBatch, updateDoc, arrayUnion } from 'firebase/firestore';\nimport { getStorage, ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';\nimport { v4 as uuidv4 } from 'uuid';\nexport var fetchAnimalsByAssociation = createAsyncThunk('animals/fetchAnimalsByAssociation', function () {\n  var _ref = _asyncToGenerator(function* (associationId) {\n    var db = getFirestore();\n    var q = query(collection(db, 'animals'), where('associationId', '==', associationId));\n    var querySnapshot = yield getDocs(q);\n    var animalsData = [];\n    querySnapshot.forEach(function (doc) {\n      var data = doc.data();\n      if ('associationId' in data) {\n        animalsData.push(_objectSpread({\n          id: doc.id,\n          associationId: data.associationId\n        }, data));\n      }\n    });\n    return animalsData;\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport var fetchAnimalById = createAsyncThunk('animals/fetchAnimalById', function () {\n  var _ref2 = _asyncToGenerator(function* (animalId) {\n    var db = getFirestore();\n    var animalRef = doc(collection(db, 'animals'), animalId);\n    var animalSnapshot = yield getDoc(animalRef);\n    return _objectSpread({\n      id: animalSnapshot.id\n    }, animalSnapshot.data());\n  });\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport var fetchMotherById = createAsyncThunk('animals/fetchMotherById', function () {\n  var _ref4 = _asyncToGenerator(function* (motherId, _ref3) {\n    var rejectWithValue = _ref3.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var animalRef = doc(collection(db, 'animals'), motherId);\n      var animalSnapshot = yield getDoc(animalRef);\n      return _objectSpread({\n        id: animalSnapshot.id\n      }, animalSnapshot.data());\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nexport var fetchAnimalsByMother = createAsyncThunk('animals/fetchAnimalsByMother', function () {\n  var _ref5 = _asyncToGenerator(function* (motherId) {\n    var db = getFirestore();\n    var q = query(collection(db, 'animals'), where('motherAppId', '==', motherId));\n    var querySnapshot = yield getDocs(q);\n    var animalsData = [];\n    querySnapshot.forEach(function (doc) {\n      animalsData.push(_objectSpread({\n        id: doc.id\n      }, doc.data()));\n    });\n    return animalsData;\n  });\n  return function (_x5) {\n    return _ref5.apply(this, arguments);\n  };\n}());\nexport var fetchAnimalsByCity = createAsyncThunk('animals/fetchAnimalsByCity', function () {\n  var _ref6 = _asyncToGenerator(function* (cityId) {\n    var db = getFirestore();\n    var q = query(collection(db, 'animals'), where('cityId', '==', cityId));\n    var querySnapshot = yield getDocs(q);\n    var animalsData = [];\n    querySnapshot.forEach(function (doc) {\n      animalsData.push(_objectSpread({\n        id: doc.id\n      }, doc.data()));\n    });\n    return animalsData;\n  });\n  return function (_x6) {\n    return _ref6.apply(this, arguments);\n  };\n}());\nexport var fetchAnimalsBySector = createAsyncThunk('animals/fetchAnimalsBySector', function () {\n  var _ref7 = _asyncToGenerator(function* (sectorId) {\n    var db = getFirestore();\n    var q = query(collection(db, 'animals'), where('sectorId', '==', sectorId));\n    var querySnapshot = yield getDocs(q);\n    var animalsData = [];\n    querySnapshot.forEach(function (doc) {\n      animalsData.push(_objectSpread({\n        id: doc.id\n      }, doc.data()));\n    });\n    return animalsData;\n  });\n  return function (_x7) {\n    return _ref7.apply(this, arguments);\n  };\n}());\nexport var addAnimal = createAsyncThunk('animals/addAnimal', function () {\n  var _ref9 = _asyncToGenerator(function* (animalData, _ref8) {\n    var rejectWithValue = _ref8.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var animalRef = collection(db, 'animals');\n      var newAnimalRef = yield addDoc(animalRef, animalData);\n      var newAnimalSnapshot = yield getDoc(newAnimalRef);\n      var newAnimal = _objectSpread({\n        id: newAnimalRef.id\n      }, newAnimalSnapshot.data());\n      return newAnimal;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x8, _x9) {\n    return _ref9.apply(this, arguments);\n  };\n}());\nexport var updateAnimalSectorName = createAsyncThunk('animals/updateAnimalSectorName', function () {\n  var _ref12 = _asyncToGenerator(function* (_ref10, _ref11) {\n    var sectorId = _ref10.sectorId,\n      newSectorName = _ref10.newSectorName;\n    var rejectWithValue = _ref11.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var q = query(collection(db, 'animals'), where('sectorId', '==', sectorId));\n      var querySnapshot = yield getDocs(q);\n      var batch = writeBatch(db);\n      querySnapshot.forEach(function (animalDoc) {\n        var animalRef = doc(db, 'animals', animalDoc.id);\n        batch.update(animalRef, {\n          sectorName: newSectorName\n        });\n      });\n      yield batch.commit();\n      return {\n        sectorId: sectorId,\n        newSectorName: newSectorName\n      };\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x10, _x11) {\n    return _ref12.apply(this, arguments);\n  };\n}());\nexport var updateAnimalCityName = createAsyncThunk('animals/updateAnimalCityName', function () {\n  var _ref15 = _asyncToGenerator(function* (_ref13, _ref14) {\n    var cityId = _ref13.cityId,\n      newCityName = _ref13.newCityName;\n    var rejectWithValue = _ref14.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var q = query(collection(db, 'animals'), where('cityId', '==', cityId));\n      var querySnapshot = yield getDocs(q);\n      var batch = writeBatch(db);\n      querySnapshot.forEach(function (animalDoc) {\n        var animalRef = doc(db, 'animals', animalDoc.id);\n        batch.update(animalRef, {\n          cityName: newCityName\n        });\n      });\n      yield batch.commit();\n      return {\n        cityId: cityId,\n        newCityName: newCityName\n      };\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x12, _x13) {\n    return _ref15.apply(this, arguments);\n  };\n}());\nexport var removeSectorFromAnimals = createAsyncThunk('animals/removeSectorFromAnimals', function () {\n  var _ref18 = _asyncToGenerator(function* (_ref16, _ref17) {\n    var sectorId = _ref16.sectorId,\n      cityId = _ref16.cityId;\n    var rejectWithValue = _ref17.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var q = query(collection(db, 'animals'), where('sectorId', '==', sectorId), where('cityId', '==', cityId));\n      var querySnapshot = yield getDocs(q);\n      var batch = writeBatch(db);\n      querySnapshot.forEach(function (animalDoc) {\n        var animalRef = doc(db, 'animals', animalDoc.id);\n        batch.update(animalRef, {\n          sectorId: '',\n          sectorName: ''\n        });\n      });\n      yield batch.commit();\n      return sectorId;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x14, _x15) {\n    return _ref18.apply(this, arguments);\n  };\n}());\nexport var removeCityFromAnimals = createAsyncThunk('animals/removeCityFromAnimals', function () {\n  var _ref20 = _asyncToGenerator(function* (cityId, _ref19) {\n    var rejectWithValue = _ref19.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var q = query(collection(db, 'animals'), where('cityId', '==', cityId));\n      var querySnapshot = yield getDocs(q);\n      var batch = writeBatch(db);\n      querySnapshot.forEach(function (animalDoc) {\n        var animalRef = doc(db, 'animals', animalDoc.id);\n        batch.update(animalRef, {\n          cityId: '',\n          cityName: ''\n        });\n      });\n      yield batch.commit();\n      return cityId;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x16, _x17) {\n    return _ref20.apply(this, arguments);\n  };\n}());\nexport var uploadImage = function () {\n  var _ref21 = _asyncToGenerator(function* (imageUri) {\n    try {\n      var response = yield fetch(imageUri);\n      var blob = yield response.blob();\n      var storage = getStorage();\n      var imageName = uuidv4();\n      var storageRef = ref(storage, `images/${imageName}`);\n      yield uploadBytes(storageRef, blob);\n      var imageUrl = yield getDownloadURL(storageRef);\n      return imageUrl;\n    } catch (error) {\n      throw new Error(`Une erreur s'est produite lors du téléchargement de l'image : ${error.message}`);\n    }\n  });\n  return function uploadImage(_x18) {\n    return _ref21.apply(this, arguments);\n  };\n}();\nexport var updateAnimalImage = createAsyncThunk('animals/updateAnimalImage', function () {\n  var _ref24 = _asyncToGenerator(function* (_ref22, _ref23) {\n    var animalId = _ref22.animalId,\n      image = _ref22.image;\n    var rejectWithValue = _ref23.rejectWithValue;\n    try {\n      var imageUrl = yield uploadImage(image);\n      var db = getFirestore();\n      var animalRef = doc(db, 'animals', animalId);\n      yield updateDoc(animalRef, {\n        image: imageUrl\n      });\n      return {\n        animalId: animalId,\n        imageUrl: imageUrl\n      };\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x19, _x20) {\n    return _ref24.apply(this, arguments);\n  };\n}());\nexport var addDocumentToAnimal = createAsyncThunk('animals/addDocumentToAnimal', function () {\n  var _ref26 = _asyncToGenerator(function* (_ref25, thunkAPI) {\n    var animalId = _ref25.animalId,\n      documents = _ref25.documents;\n    try {\n      var db = getFirestore();\n      var animalRef = doc(db, 'animals', animalId);\n      yield updateDoc(animalRef, {\n        documents: arrayUnion.apply(void 0, _toConsumableArray(documents))\n      });\n      return animalId;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  });\n  return function (_x21, _x22) {\n    return _ref26.apply(this, arguments);\n  };\n}());\nexport var uploadFile = createAsyncThunk('animals/uploadFile', function () {\n  var _ref27 = _asyncToGenerator(function* (file, thunkAPI) {\n    try {\n      var storage = getStorage();\n      var storageRef = ref(storage, `files/${file.name}`);\n      yield uploadBytes(storageRef, file);\n      var fileUrl = yield getDownloadURL(storageRef);\n      return {\n        name: file.name,\n        url: fileUrl\n      };\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  });\n  return function (_x23, _x24) {\n    return _ref27.apply(this, arguments);\n  };\n}());\nexport var uploadDocumentsAndUpdateAnimal = createAsyncThunk('animals/uploadDocumentsAndUpdateAnimal', function () {\n  var _ref29 = _asyncToGenerator(function* (_ref28, thunkAPI) {\n    var animalId = _ref28.animalId,\n      documents = _ref28.documents;\n    try {\n      var uploadPromises = documents.map(function (doc) {\n        return thunkAPI.dispatch(uploadFile(doc));\n      });\n      var uploadedDocuments = yield Promise.all(uploadPromises);\n      yield thunkAPI.dispatch(addDocumentToAnimal({\n        animalId: animalId,\n        documents: uploadedDocuments\n      }));\n      return uploadedDocuments;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  });\n  return function (_x25, _x26) {\n    return _ref29.apply(this, arguments);\n  };\n}());\nexport var uploadSingleFile = function () {\n  var _ref30 = _asyncToGenerator(function* (file) {\n    try {\n      var storage = getStorage();\n      var storageRef = ref(storage, `files/${file.name}`);\n      yield uploadBytes(storageRef, file);\n      var fileUrl = yield getDownloadURL(storageRef);\n      return {\n        name: file.name,\n        url: fileUrl\n      };\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  });\n  return function uploadSingleFile(_x27) {\n    return _ref30.apply(this, arguments);\n  };\n}();\nexport var deleteFileFromStorage = createAsyncThunk('animals/deleteFileFromStorage', function () {\n  var _ref31 = _asyncToGenerator(function* (fileName, thunkAPI) {\n    try {\n      var storage = getStorage();\n      var fileRef = ref(storage, `files/${fileName}`);\n      yield deleteObject(fileRef);\n      return fileName;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  });\n  return function (_x28, _x29) {\n    return _ref31.apply(this, arguments);\n  };\n}());\nexport var deleteDocumentFromAnimal = createAsyncThunk('animals/deleteDocumentFromAnimal', function () {\n  var _ref32 = _asyncToGenerator(function* (payload, thunkAPI) {\n    try {\n      var animalId = payload.animalId,\n        documentName = payload.documentName;\n      var animals = thunkAPI.getState().animals;\n      var animal = animals.data.find(function (a) {\n        return a.id === animalId;\n      });\n      if (!animal) {\n        throw new Error('Animal not found');\n      }\n      var animalData = _objectSpread(_objectSpread({}, animal), {}, {\n        documents: animal.documents.filter(function (singleDocument) {\n          return singleDocument.name !== documentName;\n        })\n      });\n      var updatePayload = {\n        animalId: animalId,\n        animalData: animalData\n      };\n      yield thunkAPI.dispatch(updateAnimal(updatePayload));\n      console.log(\"After update:\", animalData);\n      return {\n        animalId: animalId,\n        documentName: documentName\n      };\n    } catch (error) {\n      console.log(error);\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  });\n  return function (_x30, _x31) {\n    return _ref32.apply(this, arguments);\n  };\n}());\nexport var updateAnimal = createAsyncThunk('animals/updateAnimal', function () {\n  var _ref35 = _asyncToGenerator(function* (_ref33, _ref34) {\n    var animalId = _ref33.animalId,\n      animalData = _ref33.animalData;\n    var rejectWithValue = _ref34.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var animalRef = doc(db, 'animals', animalId);\n      yield updateDoc(animalRef, animalData);\n      return {\n        animalId: animalId,\n        animalData: animalData\n      };\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x32, _x33) {\n    return _ref35.apply(this, arguments);\n  };\n}());\nexport var deleteAnimal = createAsyncThunk('animals/deleteAnimal', function () {\n  var _ref37 = _asyncToGenerator(function* (animalId, _ref36) {\n    var rejectWithValue = _ref36.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var animalRef = doc(db, 'animals', animalId);\n      yield deleteDoc(animalRef);\n      return animalId;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x34, _x35) {\n    return _ref37.apply(this, arguments);\n  };\n}());\nvar animalsSlice = createSlice({\n  name: 'animals',\n  initialState: {\n    status: 'idle',\n    data: [],\n    selectedAnimal: null,\n    motherAnimal: null,\n    motherAnimalsList: null,\n    error: null\n  },\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchAnimalsByCity.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(fetchAnimalsByCity.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = action.payload;\n    }).addCase(fetchAnimalsByCity.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchAnimalsBySector.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(fetchAnimalsBySector.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = action.payload;\n    }).addCase(fetchAnimalsBySector.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchAnimalsByAssociation.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(fetchAnimalsByAssociation.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = action.payload;\n    }).addCase(fetchAnimalsByAssociation.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchAnimalById.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(fetchAnimalById.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.selectedAnimal = action.payload;\n    }).addCase(fetchAnimalById.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchMotherById.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(fetchMotherById.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.motherAnimal = action.payload;\n    }).addCase(fetchMotherById.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchAnimalsByMother.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(fetchAnimalsByMother.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.motherAnimalsList = action.payload;\n    }).addCase(fetchAnimalsByMother.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addAnimal.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(addAnimal.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data.push(action.payload);\n    }).addCase(addAnimal.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(updateAnimalSectorName.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(updateAnimalSectorName.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = state.data.map(function (animal) {\n        if (animal.sectorId === action.payload.sectorId) {\n          return _objectSpread(_objectSpread({}, animal), {}, {\n            sectorName: action.payload.newSectorName\n          });\n        }\n        return animal;\n      });\n    }).addCase(updateAnimalSectorName.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(removeSectorFromAnimals.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = state.data.map(function (animal) {\n        if (animal.sectorId === action.payload) {\n          return _objectSpread(_objectSpread({}, animal), {}, {\n            sectorId: ''\n          });\n        }\n        return animal;\n      });\n    }).addCase(updateAnimalCityName.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(updateAnimalCityName.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = state.data.map(function (animal) {\n        if (animal.cityId === action.payload.cityId) {\n          return _objectSpread(_objectSpread({}, animal), {}, {\n            cityName: action.payload.newCityName\n          });\n        }\n        return animal;\n      });\n    }).addCase(updateAnimalCityName.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(removeCityFromAnimals.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = state.data.map(function (animal) {\n        if (animal.cityId === action.payload) {\n          return _objectSpread(_objectSpread({}, animal), {}, {\n            cityId: ''\n          });\n        }\n        return animal;\n      });\n    }).addCase(deleteAnimal.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(deleteAnimal.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = state.data.filter(function (animal) {\n        return animal.id !== action.payload;\n      });\n    }).addCase(deleteAnimal.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(updateAnimal.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(updateAnimal.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = state.data.map(function (animal) {\n        if (animal.id === action.payload.animalId) {\n          return _objectSpread(_objectSpread({}, animal), action.payload.animalData);\n        }\n        return animal;\n      });\n      if (state.selectedAnimal && state.selectedAnimal.id === action.payload.animalId) {\n        state.selectedAnimal = _objectSpread(_objectSpread({}, state.selectedAnimal), action.payload.animalData);\n      }\n    }).addCase(updateAnimal.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(updateAnimalImage.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(updateAnimalImage.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      var _action$payload = action.payload,\n        animalId = _action$payload.animalId,\n        imageUrl = _action$payload.imageUrl;\n      var animal = state.data.find(function (animal) {\n        return animal.id === animalId;\n      });\n      if (animal) {\n        animal.image = imageUrl;\n      }\n      if (state.selectedAnimal && state.selectedAnimal.id === animalId) {\n        state.selectedAnimal.image = imageUrl;\n      }\n    }).addCase(updateAnimalImage.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(deleteFileFromStorage.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(deleteFileFromStorage.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.selectedAnimal.documents = state.selectedAnimal.documents.filter(function (document) {\n        return document.name !== action.payload;\n      });\n    }).addCase(deleteFileFromStorage.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(deleteDocumentFromAnimal.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(deleteDocumentFromAnimal.fulfilled, function (state, action) {\n      state.status = 'succeeded';\n      state.data = state.data.map(function (animal) {\n        if (animal.id === action.payload.animalId) {\n          var newDocuments = animal.documents.filter(function (document) {\n            return document.name !== action.payload.documentName;\n          });\n          animal.documents = newDocuments;\n          return _objectSpread({}, animal);\n        }\n        return animal;\n      });\n    }).addCase(deleteDocumentFromAnimal.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(uploadDocumentsAndUpdateAnimal.rejected, function (state, action) {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport default animalsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getFirestore","collection","where","doc","query","getDocs","addDoc","getDoc","deleteDoc","writeBatch","updateDoc","arrayUnion","getStorage","ref","uploadBytes","getDownloadURL","deleteObject","v4","uuidv4","fetchAnimalsByAssociation","_ref","_asyncToGenerator","associationId","db","q","querySnapshot","animalsData","forEach","data","push","_objectSpread","id","_x","apply","arguments","fetchAnimalById","_ref2","animalId","animalRef","animalSnapshot","_x2","fetchMotherById","_ref4","motherId","_ref3","rejectWithValue","error","message","_x3","_x4","fetchAnimalsByMother","_ref5","_x5","fetchAnimalsByCity","_ref6","cityId","_x6","fetchAnimalsBySector","_ref7","sectorId","_x7","addAnimal","_ref9","animalData","_ref8","newAnimalRef","newAnimalSnapshot","newAnimal","_x8","_x9","updateAnimalSectorName","_ref12","_ref10","_ref11","newSectorName","batch","animalDoc","update","sectorName","commit","_x10","_x11","updateAnimalCityName","_ref15","_ref13","_ref14","newCityName","cityName","_x12","_x13","removeSectorFromAnimals","_ref18","_ref16","_ref17","_x14","_x15","removeCityFromAnimals","_ref20","_ref19","_x16","_x17","uploadImage","_ref21","imageUri","response","fetch","blob","storage","imageName","storageRef","imageUrl","Error","_x18","updateAnimalImage","_ref24","_ref22","_ref23","image","_x19","_x20","addDocumentToAnimal","_ref26","_ref25","thunkAPI","documents","_toConsumableArray","_x21","_x22","uploadFile","_ref27","file","name","fileUrl","url","_x23","_x24","uploadDocumentsAndUpdateAnimal","_ref29","_ref28","uploadPromises","map","dispatch","uploadedDocuments","Promise","all","_x25","_x26","uploadSingleFile","_ref30","_x27","deleteFileFromStorage","_ref31","fileName","fileRef","_x28","_x29","deleteDocumentFromAnimal","_ref32","payload","documentName","animals","getState","animal","find","a","filter","singleDocument","updatePayload","updateAnimal","console","log","_x30","_x31","_ref35","_ref33","_ref34","_x32","_x33","deleteAnimal","_ref37","_ref36","_x34","_x35","animalsSlice","initialState","status","selectedAnimal","motherAnimal","motherAnimalsList","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","rejected","_action$payload","document","newDocuments","reducer"],"sources":["C:/Users/Benoitm/Documents/Coding/Kappze/MyKappze/src/features/animals/animalSlice.tsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { getFirestore, collection, where, doc, query, getDocs, addDoc, getDoc, deleteDoc, writeBatch, updateDoc, arrayUnion } from 'firebase/firestore';\r\nimport { getStorage, ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';\r\nimport { v4 as uuidv4 } from 'uuid'; // à installer avec npm ou yarn\r\n\r\n/*\r\n* Retrieve animals by Association\r\n***    \r\n*/\r\n\r\n// Définir le type de chaque animal\r\ninterface AnimalData {\r\n    id: string;\r\n    associationId: string;\r\n    // Inclure ici d'autres propriétés de l'animal si nécessaire\r\n  }\r\n  \r\n  export const fetchAnimalsByAssociation = createAsyncThunk<\r\n    AnimalData[], // Le type de la valeur de retour de la promesse\r\n    string, // Le type du payload\r\n    {} // Le type des informations de rejet si la promesse est rejetée\r\n  >('animals/fetchAnimalsByAssociation', async (associationId) => {\r\n    const db = getFirestore();\r\n    const q = query(collection(db, 'animals'), where('associationId', '==', associationId));\r\n    const querySnapshot = await getDocs(q);\r\n    const animalsData: AnimalData[] = [];\r\n    querySnapshot.forEach((doc) => {\r\n      const data = doc.data();\r\n      if ('associationId' in data) {\r\n        animalsData.push({ id: doc.id, associationId: data.associationId, ...data });\r\n      }\r\n    });\r\n    return animalsData;\r\n  });\r\n\r\n\r\n/*\r\n* Retrieve animal by ID\r\n***    \r\n*/\r\n\r\nexport const fetchAnimalById = createAsyncThunk('animals/fetchAnimalById', async (animalId) => {\r\n    const db = getFirestore();\r\n    const animalRef = doc(collection(db, 'animals'), animalId);\r\n    const animalSnapshot = await getDoc(animalRef);\r\n    return { id: animalSnapshot.id, ...animalSnapshot.data() };\r\n});\r\n\r\n/*\r\n* Retrieve mother by ID\r\n***    \r\n*/\r\n\r\nexport const fetchMotherById = createAsyncThunk('animals/fetchMotherById', async (motherId, { rejectWithValue }) => {\r\n\r\n    try {\r\n        const db = getFirestore();\r\n        const animalRef = doc(collection(db, 'animals'), motherId);\r\n        const animalSnapshot = await getDoc(animalRef);\r\n        return { id: animalSnapshot.id, ...animalSnapshot.data() };\r\n    } catch (error) {\r\n        return rejectWithValue(error.message);\r\n    }\r\n\r\n});\r\n\r\n\r\n/*\r\n* Retrieve animals by mother ID\r\n***\r\n*/\r\n\r\nexport const fetchAnimalsByMother = createAsyncThunk('animals/fetchAnimalsByMother', async (motherId) => {\r\n    const db = getFirestore();\r\n    const q = query(collection(db, 'animals'), where('motherAppId', '==', motherId));\r\n    const querySnapshot = await getDocs(q);\r\n    const animalsData = [];\r\n    querySnapshot.forEach((doc) => {\r\n        animalsData.push({ id: doc.id, ...doc.data() });\r\n    });\r\n    return animalsData;\r\n});\r\n\r\n\r\n/*\r\n* Retrieve animals by City\r\n***    \r\n*/\r\n\r\nexport const fetchAnimalsByCity = createAsyncThunk('animals/fetchAnimalsByCity', async (cityId) => {\r\n    const db = getFirestore();\r\n    const q = query(collection(db, 'animals'), where('cityId', '==', cityId));\r\n    const querySnapshot = await getDocs(q);\r\n    const animalsData = [];\r\n    querySnapshot.forEach((doc) => {\r\n        animalsData.push({ id: doc.id, ...doc.data() });\r\n    });\r\n    return animalsData;\r\n});\r\n\r\n/*\r\n* Retrieve animals by Sector\r\n***    \r\n*/\r\n\r\nexport const fetchAnimalsBySector = createAsyncThunk('animals/fetchAnimalsBySector', async (sectorId) => {\r\n    const db = getFirestore();\r\n    const q = query(collection(db, 'animals'), where('sectorId', '==', sectorId));\r\n    const querySnapshot = await getDocs(q);\r\n    const animalsData = [];\r\n    querySnapshot.forEach((doc) => {\r\n        animalsData.push({ id: doc.id, ...doc.data() });\r\n    });\r\n    return animalsData;\r\n});\r\n\r\n\r\n\r\n/*\r\n* Add new animal\r\n***    \r\n*/\r\n\r\n\r\nexport const addAnimal = createAsyncThunk(\r\n    'animals/addAnimal',\r\n    async (animalData, { rejectWithValue }) => {\r\n        try {\r\n            const db = getFirestore();\r\n            const animalRef = collection(db, 'animals');\r\n            const newAnimalRef = await addDoc(animalRef, animalData);\r\n            const newAnimalSnapshot = await getDoc(newAnimalRef);\r\n            const newAnimal = { id: newAnimalRef.id, ...newAnimalSnapshot.data() };\r\n            return newAnimal;\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n/*\r\n* Update animal sector name\r\n***    \r\n*/\r\n\r\nexport const updateAnimalSectorName = createAsyncThunk(\r\n    'animals/updateAnimalSectorName',\r\n    async ({ sectorId, newSectorName }, { rejectWithValue }) => {\r\n        try {\r\n            const db = getFirestore();\r\n            const q = query(collection(db, 'animals'), where('sectorId', '==', sectorId));\r\n            const querySnapshot = await getDocs(q);\r\n\r\n            const batch = writeBatch(db);\r\n            querySnapshot.forEach((animalDoc) => {\r\n                const animalRef = doc(db, 'animals', animalDoc.id);\r\n                batch.update(animalRef, { sectorName: newSectorName });\r\n            });\r\n            await batch.commit();\r\n\r\n            // Return the payload\r\n            return { sectorId, newSectorName };\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n/*\r\n* Update animal sector name\r\n***    \r\n*/\r\n\r\nexport const updateAnimalCityName = createAsyncThunk(\r\n    'animals/updateAnimalCityName',\r\n    async ({ cityId, newCityName }, { rejectWithValue }) => {\r\n        try {\r\n            const db = getFirestore();\r\n            const q = query(collection(db, 'animals'), where('cityId', '==', cityId));\r\n            const querySnapshot = await getDocs(q);\r\n\r\n            const batch = writeBatch(db);\r\n            querySnapshot.forEach((animalDoc) => {\r\n                const animalRef = doc(db, 'animals', animalDoc.id);\r\n                batch.update(animalRef, { cityName: newCityName });\r\n            });\r\n            await batch.commit();\r\n\r\n            // Return the payload\r\n            return { cityId, newCityName };\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n/*\r\n* Remove animal sector\r\n***    \r\n*/\r\n\r\nexport const removeSectorFromAnimals = createAsyncThunk(\r\n    'animals/removeSectorFromAnimals',\r\n    async ({ sectorId, cityId }, { rejectWithValue }) => {\r\n        try {\r\n            const db = getFirestore();\r\n            const q = query(\r\n                collection(db, 'animals'),\r\n                where('sectorId', '==', sectorId),\r\n                where('cityId', '==', cityId)\r\n            );\r\n            const querySnapshot = await getDocs(q);\r\n\r\n            const batch = writeBatch(db);\r\n            querySnapshot.forEach((animalDoc) => {\r\n                const animalRef = doc(db, 'animals', animalDoc.id);\r\n                batch.update(animalRef, { sectorId: '', sectorName: '' });\r\n            });\r\n            await batch.commit();\r\n\r\n            // Return the sectorId\r\n            return sectorId;\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n/*\r\n* Remove animal city\r\n***    \r\n*/\r\n\r\nexport const removeCityFromAnimals = createAsyncThunk(\r\n    'animals/removeCityFromAnimals',\r\n    async (cityId, { rejectWithValue }) => {\r\n        try {\r\n            const db = getFirestore();\r\n            const q = query(collection(db, 'animals'), where('cityId', '==', cityId));\r\n            const querySnapshot = await getDocs(q);\r\n\r\n            const batch = writeBatch(db);\r\n            querySnapshot.forEach((animalDoc) => {\r\n                const animalRef = doc(db, 'animals', animalDoc.id);\r\n                batch.update(animalRef, { cityId: '', cityName: '' });\r\n            });\r\n            await batch.commit();\r\n\r\n            // Return the sectorId\r\n            return cityId;\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n\r\n/*\r\n* Add animal profile image\r\n***    \r\n*/\r\n\r\n\r\n// export const uploadImage = async (image) => {\r\n//     try {\r\n//         const storage = getStorage();\r\n//         const storageRef = ref(storage, `images/${image.name}`);\r\n//         await uploadBytes(storageRef, image);\r\n//         const imageUrl = await getDownloadURL(storageRef);\r\n//         return imageUrl;\r\n//     } catch (error) {\r\n//         throw new Error(`Une erreur s'est produite lors du téléchargement de l'image : ${error.message}`);\r\n//     }\r\n// };\r\n\r\nexport const uploadImage = async (imageUri) => {\r\n    try {\r\n        const response = await fetch(imageUri);\r\n        const blob = await response.blob();\r\n\r\n        const storage = getStorage();\r\n        const imageName = uuidv4(); // générer un nom unique pour l'image\r\n        const storageRef = ref(storage, `images/${imageName}`);\r\n        \r\n        await uploadBytes(storageRef, blob);\r\n        const imageUrl = await getDownloadURL(storageRef);\r\n        \r\n        return imageUrl;\r\n    } catch (error) {\r\n        throw new Error(`Une erreur s'est produite lors du téléchargement de l'image : ${error.message}`);\r\n    }\r\n};\r\n\r\n/*\r\n* Update animal image\r\n***\r\n*/\r\n\r\nexport const updateAnimalImage = createAsyncThunk(\r\n    'animals/updateAnimalImage',\r\n    async ({ animalId, image }, { rejectWithValue }) => {\r\n        try {\r\n            const imageUrl = await uploadImage(image);\r\n\r\n            const db = getFirestore();\r\n            const animalRef = doc(db, 'animals', animalId);\r\n            await updateDoc(animalRef, { image: imageUrl });\r\n\r\n            return { animalId, imageUrl };\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n\r\n/*\r\n* Add animal pdf\r\n***    \r\n*/\r\n\r\n// export const uploadFile = async (file) => {\r\n//     try {\r\n//         const storage = getStorage();\r\n//         const storageRef = ref(storage, `files/${file.name}`);\r\n//         await uploadBytes(storageRef, file);\r\n//         const fileUrl = await getDownloadURL(storageRef);\r\n//         return {\r\n//             name: file.name,\r\n//             url: fileUrl\r\n//         }\r\n\r\n//     } catch (error) {\r\n//         throw new Error(`Une erreur s'est produite lors du téléchargement du fichier : ${error.message}`);\r\n//     }\r\n// };\r\n\r\nexport const addDocumentToAnimal = createAsyncThunk(\r\n    'animals/addDocumentToAnimal',\r\n    async ({ animalId, documents }, thunkAPI) => {\r\n        try {\r\n            // Assuming you have a Firestore reference to your animals collection\r\n            const db = getFirestore();\r\n            const animalRef = doc(db, 'animals', animalId);\r\n            await updateDoc(animalRef, { documents: arrayUnion(...documents) });\r\n            return animalId;\r\n        } catch (error) {\r\n            return thunkAPI.rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\nexport const uploadFile = createAsyncThunk(\r\n    'animals/uploadFile',\r\n    async (file, thunkAPI) => {\r\n        try {\r\n            const storage = getStorage();\r\n            const storageRef = ref(storage, `files/${file.name}`);\r\n            await uploadBytes(storageRef, file);\r\n            const fileUrl = await getDownloadURL(storageRef);\r\n            return {\r\n                name: file.name,\r\n                url: fileUrl\r\n            };\r\n        } catch (error) {\r\n            return thunkAPI.rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n\r\nexport const uploadDocumentsAndUpdateAnimal = createAsyncThunk(\r\n    'animals/uploadDocumentsAndUpdateAnimal',\r\n    async ({ animalId, documents }, thunkAPI) => {\r\n        try {\r\n            // Map each document to a Promise that will resolve to an object {name, url}\r\n            const uploadPromises = documents.map((doc) => thunkAPI.dispatch(uploadFile(doc)));\r\n            // console.log(uploadPromises);\r\n            // Wait for all uploads to complete\r\n\r\n            const uploadedDocuments = await Promise.all(uploadPromises);\r\n\r\n            // Add the uploaded documents to the animal\r\n            await thunkAPI.dispatch(addDocumentToAnimal({ animalId, documents: uploadedDocuments }));\r\n\r\n            return uploadedDocuments;\r\n        } catch (error) {\r\n            // console.log(error)\r\n            return thunkAPI.rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n\r\nexport const uploadSingleFile = async (file) => {\r\n    try {\r\n        const storage = getStorage();\r\n        const storageRef = ref(storage, `files/${file.name}`);\r\n        await uploadBytes(storageRef, file);\r\n        const fileUrl = await getDownloadURL(storageRef);\r\n        return {\r\n            name: file.name,\r\n            url: fileUrl\r\n        };\r\n    } catch (error) {\r\n        throw new Error(error.message);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n/*\r\n* Delete file\r\n***    \r\n*/\r\n\r\nexport const deleteFileFromStorage = createAsyncThunk(\r\n    'animals/deleteFileFromStorage',\r\n    async (fileName, thunkAPI) => {\r\n        try {\r\n            const storage = getStorage();\r\n            const fileRef = ref(storage, `files/${fileName}`);\r\n            await deleteObject(fileRef);\r\n            return fileName;\r\n        } catch (error) {\r\n            return thunkAPI.rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\nexport const deleteDocumentFromAnimal = createAsyncThunk(\r\n    'animals/deleteDocumentFromAnimal',\r\n    async (payload, thunkAPI) => {\r\n        try {\r\n            const { animalId, documentName } = payload;\r\n            const animals = thunkAPI.getState().animals;\r\n            const animal = animals.data.find(a => a.id === animalId);\r\n\r\n            if (!animal) {\r\n                throw new Error('Animal not found');\r\n            }\r\n\r\n            // Create a new copy of the animal and modify the copy\r\n            const animalData = {\r\n                ...animal,\r\n                documents: animal.documents.filter(singleDocument => singleDocument.name !== documentName),\r\n            };\r\n            \r\n            \r\n            // Here you should persist the changes in your backend as well\r\n            // For example, by calling a function like `updateAnimal(animalId, animal)`\r\n            const updatePayload = {\r\n                animalId: animalId,\r\n                animalData: animalData\r\n            };\r\n\r\n            await thunkAPI.dispatch(updateAnimal(updatePayload));            console.log(\"After update:\", animalData);\r\n            \r\n            return { animalId: animalId, documentName: documentName }; // Returning updated animal's id and documentName\r\n        } catch (error) {\r\n            console.log(error)\r\n            return thunkAPI.rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n/*\r\n* Update animal informations\r\n***    \r\n*/\r\n\r\nexport const updateAnimal = createAsyncThunk(\r\n    'animals/updateAnimal',\r\n    async ({ animalId, animalData }, { rejectWithValue }) => {\r\n\r\n        try {\r\n            const db = getFirestore();\r\n            const animalRef = doc(db, 'animals', animalId);\r\n            await updateDoc(animalRef, animalData);\r\n            return { animalId, animalData };\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\n\r\nexport const deleteAnimal = createAsyncThunk(\r\n    'animals/deleteAnimal',\r\n    async (animalId, { rejectWithValue }) => {\r\n        try {\r\n            const db = getFirestore();\r\n            const animalRef = doc(db, 'animals', animalId);\r\n            await deleteDoc(animalRef);\r\n            return animalId;\r\n        } catch (error) {\r\n            return rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\n\r\n/*\r\n* * * Animal Slice\r\n***    \r\n*/\r\n\r\nconst animalsSlice = createSlice({\r\n    name: 'animals',\r\n    initialState: {\r\n        status: 'idle',\r\n        data: [],\r\n        selectedAnimal: null,\r\n        motherAnimal: null,\r\n        motherAnimalsList: null,\r\n        error: null,\r\n    },\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchAnimalsByCity.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(fetchAnimalsByCity.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = action.payload;\r\n            })\r\n            .addCase(fetchAnimalsByCity.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.error.message;\r\n            })\r\n\r\n            .addCase(fetchAnimalsBySector.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(fetchAnimalsBySector.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = action.payload;\r\n            })\r\n            .addCase(fetchAnimalsBySector.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.error.message;\r\n            })\r\n\r\n            .addCase(fetchAnimalsByAssociation.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(fetchAnimalsByAssociation.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = action.payload;\r\n            })\r\n            .addCase(fetchAnimalsByAssociation.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.error.message;\r\n            })\r\n\r\n            .addCase(fetchAnimalById.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(fetchAnimalById.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.selectedAnimal = action.payload;\r\n            })\r\n            .addCase(fetchAnimalById.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.error.message;\r\n            })\r\n\r\n            .addCase(fetchMotherById.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(fetchMotherById.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.motherAnimal = action.payload;\r\n            })\r\n            .addCase(fetchMotherById.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.error.message;\r\n            })\r\n\r\n            .addCase(fetchAnimalsByMother.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(fetchAnimalsByMother.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.motherAnimalsList = action.payload;\r\n            })\r\n            .addCase(fetchAnimalsByMother.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.error.message;\r\n                // state.motherAnimal = '';\r\n            })\r\n\r\n            .addCase(addAnimal.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(addAnimal.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data.push(action.payload);\r\n                // addDocumentToAnimal(action.payload.id, action.payload.documents)\r\n                // console.log('OUAI LE PAYLOAD')\r\n                // console.log(action.payload)\r\n            })\r\n            .addCase(addAnimal.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            })\r\n\r\n            .addCase(updateAnimalSectorName.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(updateAnimalSectorName.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = state.data.map((animal) => {\r\n                    if (animal.sectorId === action.payload.sectorId) {\r\n                        return { ...animal, sectorName: action.payload.newSectorName };\r\n                    }\r\n                    return animal;\r\n                });\r\n            })\r\n            .addCase(updateAnimalSectorName.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            })\r\n            .addCase(removeSectorFromAnimals.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = state.data.map((animal) => {\r\n                    if (animal.sectorId === action.payload) {\r\n                        return { ...animal, sectorId: '' };\r\n                    }\r\n                    return animal;\r\n                });\r\n            })\r\n            .addCase(updateAnimalCityName.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(updateAnimalCityName.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = state.data.map((animal) => {\r\n                    if (animal.cityId === action.payload.cityId) {\r\n                        return { ...animal, cityName: action.payload.newCityName };\r\n                    }\r\n                    return animal;\r\n                });\r\n            })\r\n            .addCase(updateAnimalCityName.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            })\r\n            .addCase(removeCityFromAnimals.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = state.data.map((animal) => {\r\n                    if (animal.cityId === action.payload) {\r\n                        return { ...animal, cityId: '' };\r\n                    }\r\n                    return animal;\r\n                });\r\n            })\r\n            .addCase(deleteAnimal.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(deleteAnimal.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = state.data.filter((animal) => animal.id !== action.payload);\r\n            })\r\n            .addCase(deleteAnimal.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            })\r\n            .addCase(updateAnimal.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(updateAnimal.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = state.data.map((animal) => {\r\n                    if (animal.id === action.payload.animalId) {\r\n                        return { ...animal, ...action.payload.animalData };\r\n                    }\r\n                    return animal;\r\n                });\r\n                if (state.selectedAnimal && state.selectedAnimal.id === action.payload.animalId) {\r\n                    state.selectedAnimal = { ...state.selectedAnimal, ...action.payload.animalData };\r\n                }\r\n            })\r\n            .addCase(updateAnimal.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            })\r\n            .addCase(updateAnimalImage.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(updateAnimalImage.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                const { animalId, imageUrl } = action.payload;\r\n                const animal = state.data.find((animal) => animal.id === animalId);\r\n                if (animal) {\r\n                    animal.image = imageUrl;\r\n                }\r\n                if (state.selectedAnimal && state.selectedAnimal.id === animalId) {\r\n                    state.selectedAnimal.image = imageUrl;\r\n                }\r\n            })\r\n            .addCase(updateAnimalImage.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            })\r\n            .addCase(deleteFileFromStorage.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(deleteFileFromStorage.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                // supprimer l'entrée correspondante de documents dans le state\r\n                state.selectedAnimal.documents = state.selectedAnimal.documents.filter(document => document.name !== action.payload);\r\n            })\r\n            .addCase(deleteFileFromStorage.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            })\r\n            .addCase(deleteDocumentFromAnimal.pending, (state) => {\r\n                state.status = 'loading';\r\n            })\r\n            .addCase(deleteDocumentFromAnimal.fulfilled, (state, action) => {\r\n                state.status = 'succeeded';\r\n                state.data = state.data.map((animal) => {\r\n                    if (animal.id === action.payload.animalId) {\r\n                        const newDocuments = animal.documents.filter(document => {\r\n                            return document.name !== action.payload.documentName\r\n                        });\r\n                        animal.documents = newDocuments;\r\n                        return {\r\n                            ...animal\r\n                        };\r\n                    }\r\n                    return animal;\r\n                });\r\n            })\r\n            \r\n            \r\n\r\n            .addCase(deleteDocumentFromAnimal.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            })\r\n            .addCase(uploadDocumentsAndUpdateAnimal.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // .addCase(uploadFile.pending, (state) => {\r\n        //     state.status = 'loading';\r\n        // })\r\n        // .addCase(uploadFile.fulfilled, (state, action) => {\r\n        //     state.status = 'succeeded';\r\n        //     state.data = state.data.map((animal) => {\r\n        //         if (animal.id === action.payload.animalId) {\r\n        //             return {\r\n        //                 ...animal,\r\n        //                 documents: animal.documents.filter(document => document.name !== action.payload.documentName),\r\n        //             };\r\n        //         }\r\n        //         return animal;\r\n        //     });\r\n        // })\r\n        // .addCase(uploadFile.rejected, (state, action) => {\r\n        //     state.status = 'failed';\r\n        //     state.error = action.payload;\r\n        // })\r\n\r\n\r\n\r\n\r\n    },\r\n});\r\n\r\nexport default animalsSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}