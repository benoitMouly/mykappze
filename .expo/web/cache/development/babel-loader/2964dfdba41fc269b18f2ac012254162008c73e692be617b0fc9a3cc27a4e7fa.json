{"ast":null,"code":"export var getErrorMsg = function getErrorMsg(errorCode) {\n  switch (errorCode) {\n    case 'auth/user-not-found':\n      return 'L\\'utilisateur n\\'existe pas';\n    case 'auth/invalid-email':\n      return 'Email invalide';\n    case 'auth/email-already-in-use':\n      return 'Email déjà utilisé par un utilisateur';\n    case 'auth/wrong-password':\n      return 'Mot de passe incorrect';\n    case 'auth/weak-password':\n      return 'Mot de passe trop faible';\n    default:\n      return 'Une erreur s\\'est produite lors de la connexion. Veuillez réessayer.';\n  }\n};\nexport var validateString = function validateString(str) {\n  var errors = {};\n  var nameRegex = /^[A-Za-zÀ-ÖØ-öø-ÿ-]+$/;\n  if (!nameRegex.test(str)) {\n    errors.str = \"Veuillez rentrer une donnée valide.\";\n  }\n  return errors;\n};\nexport var validatePassword = function validatePassword(password) {\n  var errors = {};\n  var passwordRegex = /^.{6,20}$/;\n  if (!passwordRegex.test(password)) {\n    errors.password = \"Le mot de passe doit contenir entre 8 et 20 caractères.\";\n  }\n  return errors;\n};\nexport var validatePhoneNumber = function validatePhoneNumber(phoneNumber) {\n  var errors = {};\n  var phoneNumberRegex = /^0[1-9]\\d{8}$/;\n  if (!phoneNumberRegex.test(phoneNumber)) {\n    errors.phoneNumber = \"Le numéro de téléphone est invalide. Format désiré : 0634321254\";\n  }\n  return errors;\n};\nexport var validateEmail = function validateEmail(email, err) {\n  var errors = {};\n  var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    errors.email = \"L'email invalide. Format désiré : johndoe@domain.com\";\n  }\n  err = errors;\n  return err;\n};\nexport var validateIdAssociation = function validateIdAssociation(str) {\n  var errors = {};\n  var stringRegex = /^[A-Za-zÀ-ÖØ-öø-ÿ-]+$/;\n  if (!stringRegex.test(str)) {\n    errors.str = \"Veuillez rentrer une donnée valide.\";\n  }\n  return errors;\n};\nexport var validateImage = function validateImage(image) {\n  var errors = {};\n  var allowedExtensions = ['png', 'jpg', 'jpeg'];\n  var fileExtension = image ? image.name.split('.').pop().toLowerCase() : '';\n  if (!allowedExtensions.includes(fileExtension)) {\n    errors.imageStr = \"Impossible de charger la photo. Formats autorisés : png/jpg/jpeg.\";\n  }\n  return errors;\n};","map":{"version":3,"names":["getErrorMsg","errorCode","validateString","str","errors","nameRegex","test","validatePassword","password","passwordRegex","validatePhoneNumber","phoneNumber","phoneNumberRegex","validateEmail","email","err","emailRegex","validateIdAssociation","stringRegex","validateImage","image","allowedExtensions","fileExtension","name","split","pop","toLowerCase","includes","imageStr"],"sources":["C:/Users/Benoitm/Documents/Coding/Kappze/MyKappze/src/utils/errorMessages.js"],"sourcesContent":["export const getErrorMsg = (errorCode) => {\r\n\r\n    // console.log('ERROR CODE : ')\r\n    // console.log(errorCode)\r\n    switch (errorCode) {\r\n        case 'auth/user-not-found':\r\n            return 'L\\'utilisateur n\\'existe pas';\r\n        case 'auth/invalid-email':\r\n            return 'Email invalide';\r\n        case 'auth/email-already-in-use':\r\n            return 'Email déjà utilisé par un utilisateur';\r\n        case 'auth/wrong-password':\r\n            return 'Mot de passe incorrect'\r\n        case 'auth/weak-password':\r\n            return 'Mot de passe trop faible';\r\n        default:\r\n            return 'Une erreur s\\'est produite lors de la connexion. Veuillez réessayer.';\r\n    }\r\n};\r\n\r\n\r\nexport const validateString = (str) => {\r\n    const errors = {};\r\n\r\n    const nameRegex = /^[A-Za-zÀ-ÖØ-öø-ÿ-]+$/; // Les caractères alphabétiques uniquement (y compris les accents et les tirets)\r\n    if (!nameRegex.test(str)) {\r\n        errors.str = \"Veuillez rentrer une donnée valide.\";\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nexport const validatePassword = (password) => {\r\n    const errors = {};\r\n    const passwordRegex = /^.{6,20}$/;\r\n    if (!passwordRegex.test(password)) {\r\n        errors.password = \"Le mot de passe doit contenir entre 8 et 20 caractères.\";\r\n    }\r\n\r\n    return errors;\r\n}\r\nexport const validatePhoneNumber = (phoneNumber) => {\r\n    const errors = {};\r\n    const phoneNumberRegex = /^0[1-9]\\d{8}$/; // Format \"06 90 97 90 90\"\r\n    // Validation du numéro de téléphone\r\n    if (!phoneNumberRegex.test(phoneNumber)) {\r\n        errors.phoneNumber = \"Le numéro de téléphone est invalide. Format désiré : 0634321254\";\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (email, err) => {\r\n    const errors = {};\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; // Vérification du format d'email\r\n    // Validation de l'email\r\n    if (!emailRegex.test(email)) {\r\n        errors.email = \"L'email invalide. Format désiré : johndoe@domain.com\";\r\n    }\r\n    // console.log(errors)\r\n    err = errors;\r\n    return err;\r\n}\r\n\r\n\r\n\r\nexport const validateIdAssociation = (str) => {\r\n    const errors = {};\r\n    const stringRegex = /^[A-Za-zÀ-ÖØ-öø-ÿ-]+$/; // Les caractères alphabétiques uniquement (y compris les accents et les tirets)\r\n    if (!stringRegex.test(str)) {\r\n        errors.str = \"Veuillez rentrer une donnée valide.\";\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nexport const validateImage = (image) => {\r\n    const errors = {};\r\n    const allowedExtensions = ['png', 'jpg', 'jpeg'];\r\n    const fileExtension = image ? image.name.split('.').pop().toLowerCase() : '';\r\n    if (!allowedExtensions.includes(fileExtension)) {\r\n        errors.imageStr = \"Impossible de charger la photo. Formats autorisés : png/jpg/jpeg.\";\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n// export const validate"],"mappings":"AAAA,OAAO,IAAMA,WAAW,GAAG,SAAdA,WAAWA,CAAIC,SAAS,EAAK;EAItC,QAAQA,SAAS;IACb,KAAK,qBAAqB;MACtB,OAAO,8BAA8B;IACzC,KAAK,oBAAoB;MACrB,OAAO,gBAAgB;IAC3B,KAAK,2BAA2B;MAC5B,OAAO,uCAAuC;IAClD,KAAK,qBAAqB;MACtB,OAAO,wBAAwB;IACnC,KAAK,oBAAoB;MACrB,OAAO,0BAA0B;IACrC;MACI,OAAO,sEAAsE;EACrF;AACJ,CAAC;AAGD,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,GAAG,EAAK;EACnC,IAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAMC,SAAS,GAAG,uBAAuB;EACzC,IAAI,CAACA,SAAS,CAACC,IAAI,CAACH,GAAG,CAAC,EAAE;IACtBC,MAAM,CAACD,GAAG,GAAG,qCAAqC;EACtD;EAEA,OAAOC,MAAM;AACjB,CAAC;AAED,OAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,QAAQ,EAAK;EAC1C,IAAMJ,MAAM,GAAG,CAAC,CAAC;EACjB,IAAMK,aAAa,GAAG,WAAW;EACjC,IAAI,CAACA,aAAa,CAACH,IAAI,CAACE,QAAQ,CAAC,EAAE;IAC/BJ,MAAM,CAACI,QAAQ,GAAG,yDAAyD;EAC/E;EAEA,OAAOJ,MAAM;AACjB,CAAC;AACD,OAAO,IAAMM,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIC,WAAW,EAAK;EAChD,IAAMP,MAAM,GAAG,CAAC,CAAC;EACjB,IAAMQ,gBAAgB,GAAG,eAAe;EAExC,IAAI,CAACA,gBAAgB,CAACN,IAAI,CAACK,WAAW,CAAC,EAAE;IACrCP,MAAM,CAACO,WAAW,GAAG,iEAAiE;EAC1F;EAEA,OAAOP,MAAM;AACjB,CAAC;AAED,OAAO,IAAMS,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,KAAK,EAAEC,GAAG,EAAK;EACzC,IAAMX,MAAM,GAAG,CAAC,CAAC;EACjB,IAAMY,UAAU,GAAG,4BAA4B;EAE/C,IAAI,CAACA,UAAU,CAACV,IAAI,CAACQ,KAAK,CAAC,EAAE;IACzBV,MAAM,CAACU,KAAK,GAAG,sDAAsD;EACzE;EAEAC,GAAG,GAAGX,MAAM;EACZ,OAAOW,GAAG;AACd,CAAC;AAID,OAAO,IAAME,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAId,GAAG,EAAK;EAC1C,IAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,IAAMc,WAAW,GAAG,uBAAuB;EAC3C,IAAI,CAACA,WAAW,CAACZ,IAAI,CAACH,GAAG,CAAC,EAAE;IACxBC,MAAM,CAACD,GAAG,GAAG,qCAAqC;EACtD;EAEA,OAAOC,MAAM;AACjB,CAAC;AAED,OAAO,IAAMe,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,KAAK,EAAK;EACpC,IAAMhB,MAAM,GAAG,CAAC,CAAC;EACjB,IAAMiB,iBAAiB,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC;EAChD,IAAMC,aAAa,GAAGF,KAAK,GAAGA,KAAK,CAACG,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG,EAAE;EAC5E,IAAI,CAACL,iBAAiB,CAACM,QAAQ,CAACL,aAAa,CAAC,EAAE;IAC5ClB,MAAM,CAACwB,QAAQ,GAAG,mEAAmE;EACzF;EAEA,OAAOxB,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}