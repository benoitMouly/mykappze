{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { getFirestore, collection, where, query, getDocs, addDoc, getDoc, doc, updateDoc, deleteDoc } from \"firebase/firestore\";\nexport var fetchAssociations = createAsyncThunk(\"associations/fetchAssociations\", function () {\n  var _ref2 = _asyncToGenerator(function* (userId, _ref) {\n    var rejectWithValue = _ref.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var userAssociationsRef = collection(db, \"userAssociations\");\n      var userAssociationsQuery = query(userAssociationsRef, where(\"userId\", \"==\", userId));\n      var userAssociationsSnapshot = yield getDocs(userAssociationsQuery);\n      var associationIds = userAssociationsSnapshot.docs.map(function (doc) {\n        return doc.data().associationId;\n      });\n      var associationsData = [];\n      for (var associationId of associationIds) {\n        var associationRef = doc(db, \"associations\", associationId);\n        var associationSnapshot = yield getDoc(associationRef);\n        if (associationSnapshot.exists()) {\n          var associationData = associationSnapshot.data();\n          var isAdmin = false;\n          if (Array.isArray(associationData.role)) {\n            for (var role of associationData.role) {\n              if (role.uid === userId && role.isAdmin) {\n                isAdmin = true;\n                break;\n              }\n            }\n          }\n          associationsData.push(_objectSpread({\n            id: associationId,\n            isAdmin: isAdmin\n          }, associationData));\n        }\n      }\n      return associationsData;\n    } catch (err) {\n      return rejectWithValue(err.message || \"Unknown error\");\n    }\n  });\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport var addAssociation = createAsyncThunk(\"associations/addAssociation\", function () {\n  var _ref5 = _asyncToGenerator(function* (_ref3, _ref4) {\n    var userId = _ref3.userId,\n      associationData = _ref3.associationData;\n    var rejectWithValue = _ref4.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var associationRef = collection(db, \"associations\");\n      var newAssociationRef = yield addDoc(associationRef, associationData);\n      var newAssociationSnapshot = yield getDoc(newAssociationRef);\n      var newAssociation = _objectSpread({\n        id: newAssociationRef.id\n      }, newAssociationSnapshot.data());\n      var userAssociationsRef = collection(db, \"userAssociations\");\n      yield addDoc(userAssociationsRef, {\n        userId: userId,\n        associationId: newAssociation.id\n      });\n      return newAssociation;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref5.apply(this, arguments);\n  };\n}());\nexport var updateAssociation = createAsyncThunk(\"association/updateAssociation\", function () {\n  var _ref8 = _asyncToGenerator(function* (_ref6, _ref7) {\n    var associationId = _ref6.associationId,\n      associationData = _ref6.associationData;\n    var rejectWithValue = _ref7.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var associationRef = doc(db, \"associations\", associationId);\n      yield updateDoc(associationRef, associationData);\n      var animalsRef = collection(db, \"animals\");\n      var querySnapshot = yield getDocs(query(animalsRef, where(\"associationId\", \"==\", associationId)));\n      var promises = querySnapshot.docs.map(function (doc) {\n        var animalRef = doc.ref;\n        return updateDoc(animalRef, {\n          associationName: associationData.name\n        });\n      });\n      yield Promise.all(promises);\n      return {\n        associationId: associationId,\n        associationData: associationData\n      };\n    } catch (error) {\n      console.log(error);\n      console.log('ASSOCIATION ID -> ');\n      console.log(associationId);\n      console.log('ASSOCIATION DATA -> ');\n      console.log(associationData);\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x5, _x6) {\n    return _ref8.apply(this, arguments);\n  };\n}());\nexport var removeAssociation = createAsyncThunk(\"associations/removeAssociation\", function () {\n  var _ref11 = _asyncToGenerator(function* (_ref9, _ref10) {\n    var userId = _ref9.userId,\n      associationId = _ref9.associationId;\n    var rejectWithValue = _ref10.rejectWithValue;\n    console.log(\"slice\", userId, associationId);\n    try {\n      var db = getFirestore();\n      var associationRef = doc(db, \"associations\", associationId);\n      yield deleteDoc(associationRef);\n      var userAssociationsQuery = query(collection(db, \"userAssociations\"), where(\"userId\", \"==\", userId), where(\"associationId\", \"==\", associationId));\n      var userAssociationSnapshot = yield getDocs(userAssociationsQuery);\n      if (!userAssociationSnapshot.empty) {\n        var docId = userAssociationSnapshot.docs[0].id;\n        yield deleteDoc(doc(db, \"userAssociations\", docId));\n      } else {\n        throw new Error(\"La liaison entre l'utilisateur et l'association n'a pas été trouvée\");\n      }\n      return {\n        message: \"Association supprimée avec succès\",\n        associationId: associationId\n      };\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x7, _x8) {\n    return _ref11.apply(this, arguments);\n  };\n}());\nexport var joinAssociation = createAsyncThunk(\"associations/joinAssociation\", function () {\n  var _ref14 = _asyncToGenerator(function* (_ref12, _ref13) {\n    var userId = _ref12.userId,\n      associationId = _ref12.associationId;\n    var rejectWithValue = _ref13.rejectWithValue;\n    try {\n      var db = getFirestore();\n      var userRef = doc(db, \"users\", userId);\n      var userSnapshot = yield getDoc(userRef);\n      if (!userSnapshot.exists()) {\n        throw new Error(\"Utilisateur introuvable\");\n      }\n      var associationRef = doc(db, \"associations\", associationId);\n      var associationSnapshot = yield getDoc(associationRef);\n      if (!associationSnapshot.exists()) {\n        throw new Error(\"Association introuvable\");\n      }\n      var userAssociationsRef = collection(db, \"userAssociations\");\n      var querySnapshot = yield getDocs(query(userAssociationsRef, where(\"userId\", \"==\", userId), where(\"associationId\", \"==\", associationId)));\n      if (!querySnapshot.empty) {\n        throw new Error(\"L'utilisateur est déjà membre de cette association\");\n      }\n      yield addDoc(userAssociationsRef, {\n        userId: userId,\n        associationId: associationId\n      });\n      var newRole = {\n        uid: userId,\n        isAdmin: false\n      };\n      var associationData = associationSnapshot.data();\n      associationData.role = [].concat(_toConsumableArray(associationData.role), [newRole]);\n      yield updateDoc(associationRef, associationData);\n      var updatedAssociationData = _objectSpread({\n        id: associationSnapshot.id\n      }, associationData);\n      return updatedAssociationData;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x9, _x10) {\n    return _ref14.apply(this, arguments);\n  };\n}());\nexport var uploadImage = function () {\n  var _ref15 = _asyncToGenerator(function* (image) {\n    try {\n      var storage = getStorage();\n      var storageRef = ref(storage, `images/${image.name}`);\n      yield uploadBytes(storageRef, image);\n      var imageUrl = yield getDownloadURL(storageRef);\n      return imageUrl;\n    } catch (error) {\n      throw new Error(`Une erreur s'est produite lors du téléchargement de l'image : ${error.message}`);\n    }\n  });\n  return function uploadImage(_x11) {\n    return _ref15.apply(this, arguments);\n  };\n}();\nexport var updateAssociationImage = createAsyncThunk(\"animals/updateAssociationImage\", function () {\n  var _ref18 = _asyncToGenerator(function* (_ref16, _ref17) {\n    var associationId = _ref16.associationId,\n      image = _ref16.image;\n    var rejectWithValue = _ref17.rejectWithValue;\n    try {\n      var imageUrl = yield uploadImage(image);\n      var db = getFirestore();\n      var animalRef = doc(db, \"associations\", associationId);\n      yield updateDoc(animalRef, {\n        image: imageUrl\n      });\n      return {\n        associationId: associationId,\n        imageUrl: imageUrl\n      };\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x12, _x13) {\n    return _ref18.apply(this, arguments);\n  };\n}());\nexport var changeUserRole = createAsyncThunk(\"associations/changeUserRole\", function () {\n  var _ref21 = _asyncToGenerator(function* (_ref19, _ref20) {\n    var userId = _ref19.userId,\n      associationId = _ref19.associationId,\n      newIsAdmin = _ref19.newIsAdmin;\n    var rejectWithValue = _ref20.rejectWithValue;\n    console.log('INFORMATIONS CHANGE USER ROLE -> ');\n    console.log(userId, associationId, newIsAdmin);\n    console.log('----');\n    try {\n      var db = getFirestore();\n      var userRef = doc(db, \"users\", userId);\n      var userSnapshot = yield getDoc(userRef);\n      if (!userSnapshot.exists()) {\n        throw new Error(\"Utilisateur introuvable\");\n      }\n      var associationRef = doc(db, \"associations\", associationId);\n      var associationSnapshot = yield getDoc(associationRef);\n      if (!associationSnapshot.exists()) {\n        throw new Error(\"Association introuvable\");\n      }\n      var associationData = associationSnapshot.data();\n      for (var role of associationData.role) {\n        if (role.uid === userId) {\n          role.isAdmin = newIsAdmin;\n          break;\n        }\n      }\n      yield updateDoc(associationRef, associationData);\n      var updatedAssociationData = _objectSpread({\n        id: associationSnapshot.id\n      }, associationData);\n      return updatedAssociationData;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  return function (_x14, _x15) {\n    return _ref21.apply(this, arguments);\n  };\n}());\nvar associationsSlice = createSlice({\n  name: \"associations\",\n  initialState: {\n    status: \"idle\",\n    data: [],\n    error: null\n  },\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchAssociations.pending, function (state) {\n      state.status = \"loading\";\n    }).addCase(fetchAssociations.fulfilled, function (state, action) {\n      state.status = \"succeeded\";\n      state.data = action.payload;\n    }).addCase(fetchAssociations.rejected, function (state, action) {\n      state.status = \"failed\";\n      state.error = action.payload;\n    }).addCase(addAssociation.pending, function (state) {\n      state.status = \"loading\";\n    }).addCase(addAssociation.fulfilled, function (state, action) {\n      state.status = \"succeeded\";\n      state.data.push(action.payload);\n    }).addCase(addAssociation.rejected, function (state, action) {\n      state.status = \"failed\";\n      state.error = action.payload;\n    }).addCase(updateAssociation.pending, function (state) {\n      state.status = \"loading\";\n    }).addCase(updateAssociation.fulfilled, function (state, action) {\n      state.status = \"succeeded\";\n      console.log('ouyai');\n      state.data = state.data.map(function (association) {\n        if (association.id === action.payload.associationId) {\n          return _objectSpread(_objectSpread({}, association), action.payload.associationData);\n        }\n        return association;\n      });\n      if (state.selectedAssociation && state.selectedAssociation.id === action.payload.associationId) {\n        state.selectedAssociation = _objectSpread(_objectSpread({}, state.selectedAssociation), action.payload.associationData);\n      }\n    }).addCase(updateAssociation.rejected, function (state, action) {\n      state.status = \"failed\";\n      state.error = action.payload;\n    });\n    builder.addCase(joinAssociation.pending, function (state) {\n      state.status = \"loading\";\n    }).addCase(joinAssociation.fulfilled, function (state, action) {\n      state.status = \"succeeded\";\n      state.data.push(action.payload);\n    }).addCase(joinAssociation.rejected, function (state, action) {\n      state.status = \"failed\";\n      state.error = action.payload;\n    });\n    builder.addCase(changeUserRole.pending, function (state) {\n      state.status = \"loading\";\n    }).addCase(changeUserRole.fulfilled, function (state, action) {\n      state.status = \"succeeded\";\n      var index = state.data.findIndex(function (association) {\n        return association.id === action.payload.id;\n      });\n      if (index !== -1) {\n        state.data[index] = action.payload;\n      }\n    }).addCase(changeUserRole.rejected, function (state, action) {\n      state.status = \"failed\";\n      state.error = action.payload;\n    });\n    builder.addCase(updateAssociationImage.pending, function (state) {\n      state.status = \"loading\";\n    }).addCase(updateAssociationImage.fulfilled, function (state, action) {\n      state.status = \"succeeded\";\n      var _action$payload = action.payload,\n        associationId = _action$payload.associationId,\n        imageUrl = _action$payload.imageUrl;\n      var association = state.data.find(function (association) {\n        return association.id === associationId;\n      });\n      if (association) {\n        association.image = imageUrl;\n      }\n      if (state.selectedAnimal && state.selectedAnimal.id === associationId) {\n        state.selectedAnimal.image = imageUrl;\n      }\n    }).addCase(updateAssociationImage.rejected, function (state, action) {\n      state.status = \"failed\";\n      state.error = action.payload;\n    });\n    builder.addCase(removeAssociation.pending, function (state) {\n      state.status = \"loading\";\n    });\n    builder.addCase(removeAssociation.fulfilled, function (state, action) {\n      state.status = \"succeeded\";\n      state.data = state.data.filter(function (association) {\n        return association.id !== action.payload.id;\n      });\n    }).addCase(removeAssociation.rejected, function (state, action) {\n      state.status = \"failed\";\n      state.error = action.payload;\n    });\n  }\n});\nexport default associationsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getFirestore","collection","where","query","getDocs","addDoc","getDoc","doc","updateDoc","deleteDoc","fetchAssociations","_ref2","_asyncToGenerator","userId","_ref","rejectWithValue","db","userAssociationsRef","userAssociationsQuery","userAssociationsSnapshot","associationIds","docs","map","data","associationId","associationsData","associationRef","associationSnapshot","exists","associationData","isAdmin","Array","isArray","role","uid","push","_objectSpread","id","err","message","_x","_x2","apply","arguments","addAssociation","_ref5","_ref3","_ref4","newAssociationRef","newAssociationSnapshot","newAssociation","error","_x3","_x4","updateAssociation","_ref8","_ref6","_ref7","animalsRef","querySnapshot","promises","animalRef","ref","associationName","name","Promise","all","console","log","_x5","_x6","removeAssociation","_ref11","_ref9","_ref10","userAssociationSnapshot","empty","docId","Error","_x7","_x8","joinAssociation","_ref14","_ref12","_ref13","userRef","userSnapshot","newRole","concat","_toConsumableArray","updatedAssociationData","_x9","_x10","uploadImage","_ref15","image","storage","getStorage","storageRef","uploadBytes","imageUrl","getDownloadURL","_x11","updateAssociationImage","_ref18","_ref16","_ref17","_x12","_x13","changeUserRole","_ref21","_ref19","_ref20","newIsAdmin","_x14","_x15","associationsSlice","initialState","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","association","selectedAssociation","index","findIndex","_action$payload","find","selectedAnimal","filter","reducer"],"sources":["C:/Users/Benoitm/Documents/Coding/Kappze/MyKappze/src/features/associations/associationSlice.tsx"],"sourcesContent":["import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  PayloadAction,\r\n  Action,\r\n} from \"@reduxjs/toolkit\";\r\nimport {\r\n  getFirestore,\r\n  collection,\r\n  where,\r\n  query,\r\n  getDocs,\r\n  addDoc,\r\n  getDoc,\r\n  doc,\r\n  updateDoc,\r\n  deleteDoc,\r\n} from \"firebase/firestore\";\r\n\r\ninterface Association {\r\n  id: string;\r\n  isAdmin: boolean;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface AssociationState {\r\n  status: string;\r\n  data: Association[];\r\n  error: string | null;\r\n}\r\n\r\nexport const fetchAssociations = createAsyncThunk<Association[], string>(\r\n  \"associations/fetchAssociations\",\r\n  async (userId: string, { rejectWithValue }) => {\r\n    try {\r\n      const db = getFirestore();\r\n      const userAssociationsRef = collection(db, \"userAssociations\");\r\n      const userAssociationsQuery = query(\r\n        userAssociationsRef,\r\n        where(\"userId\", \"==\", userId)\r\n      );\r\n      const userAssociationsSnapshot = await getDocs(userAssociationsQuery);\r\n      const associationIds = userAssociationsSnapshot.docs.map(\r\n        (doc) => doc.data().associationId\r\n      );\r\n      const associationsData: Association[] = [];\r\n\r\n      for (const associationId of associationIds) {\r\n        const associationRef = doc(db, \"associations\", associationId);\r\n        const associationSnapshot = await getDoc(associationRef);\r\n\r\n        if (associationSnapshot.exists()) {\r\n          const associationData = associationSnapshot.data();\r\n          let isAdmin = false;\r\n\r\n          if (Array.isArray(associationData.role)) {\r\n            for (let role of associationData.role) {\r\n              if (role.uid === userId && role.isAdmin) {\r\n                isAdmin = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          associationsData.push({\r\n            id: associationId,\r\n            isAdmin,\r\n            ...associationData,\r\n          });\r\n        }\r\n      }\r\n\r\n      return associationsData;\r\n    } catch (err) {\r\n      return rejectWithValue(err.message || \"Unknown error\");\r\n    }\r\n  }\r\n);\r\n\r\n/*\r\n * Create Association\r\n ***\r\n */\r\n\r\nexport const addAssociation = createAsyncThunk(\r\n  \"associations/addAssociation\",\r\n  async ({ userId, associationData }, { rejectWithValue }) => {\r\n    try {\r\n      const db = getFirestore();\r\n      const associationRef = collection(db, \"associations\");\r\n      const newAssociationRef = await addDoc(associationRef, associationData);\r\n      const newAssociationSnapshot = await getDoc(newAssociationRef);\r\n      const newAssociation = {\r\n        id: newAssociationRef.id,\r\n        ...newAssociationSnapshot.data(),\r\n      };\r\n\r\n      // Ajoutez l'ID de l'association à la collection \"userAssociations\" de l'utilisateur\r\n      const userAssociationsRef = collection(db, \"userAssociations\");\r\n      await addDoc(userAssociationsRef, {\r\n        userId,\r\n        associationId: newAssociation.id,\r\n      });\r\n\r\n      return newAssociation;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const updateAssociation = createAsyncThunk(\r\n  \"association/updateAssociation\",\r\n  async ({ associationId, associationData }, { rejectWithValue }) => {\r\n\r\n\r\n    try {\r\n      const db = getFirestore();\r\n      const associationRef = doc(db, \"associations\", associationId);\r\n      await updateDoc(associationRef, associationData);\r\n\r\n      // Mise à jour des animaux associés\r\n      const animalsRef = collection(db, \"animals\");\r\n      const querySnapshot = await getDocs(\r\n        query(animalsRef, where(\"associationId\", \"==\", associationId))\r\n        \r\n      );\r\n\r\n      const promises = querySnapshot.docs.map((doc) => {\r\n        const animalRef = doc.ref;\r\n        return updateDoc(animalRef, { associationName: associationData.name});\r\n      });\r\n\r\n      await Promise.all(promises);\r\n\r\n      return { associationId, associationData };\r\n    } catch (error) {\r\n      console.log(error)\r\n      console.log('ASSOCIATION ID -> ')\r\n      console.log(associationId)\r\n      console.log('ASSOCIATION DATA -> ')\r\n      console.log(associationData)\r\n\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\n/*\r\n * Delete Association\r\n ***\r\n */\r\n\r\nexport const removeAssociation = createAsyncThunk(\r\n  \"associations/removeAssociation\",\r\n  async ({ userId, associationId }, { rejectWithValue }) => {\r\n    console.log(\"slice\", userId, associationId);\r\n    try {\r\n      const db = getFirestore();\r\n\r\n      // Supprimer l'association de la collection \"associations\"\r\n      const associationRef = doc(db, \"associations\", associationId);\r\n      await deleteDoc(associationRef);\r\n\r\n      // Supprimer l'ID de l'association de la collection \"userAssociations\" de l'utilisateur\r\n      const userAssociationsQuery = query(\r\n        collection(db, \"userAssociations\"),\r\n        where(\"userId\", \"==\", userId),\r\n        where(\"associationId\", \"==\", associationId)\r\n      );\r\n      const userAssociationSnapshot = await getDocs(userAssociationsQuery);\r\n\r\n      if (!userAssociationSnapshot.empty) {\r\n        // Supposons qu'il n'y ait qu'un seul document qui correspond à la requête\r\n        const docId = userAssociationSnapshot.docs[0].id;\r\n        await deleteDoc(doc(db, \"userAssociations\", docId));\r\n      } else {\r\n        throw new Error(\r\n          \"La liaison entre l'utilisateur et l'association n'a pas été trouvée\"\r\n        );\r\n      }\r\n\r\n      return { message: \"Association supprimée avec succès\", associationId };\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\n/*\r\n * Join Association\r\n ***\r\n */\r\n\r\nexport const joinAssociation = createAsyncThunk(\r\n  \"associations/joinAssociation\",\r\n  async ({ userId, associationId }, { rejectWithValue }) => {\r\n    try {\r\n      const db = getFirestore();\r\n\r\n      // Vérifiez si l'utilisateur existe dans la collection \"users\"\r\n      const userRef = doc(db, \"users\", userId);\r\n      const userSnapshot = await getDoc(userRef);\r\n      if (!userSnapshot.exists()) {\r\n        throw new Error(\"Utilisateur introuvable\");\r\n      }\r\n\r\n      // Vérifiez si l'association existe dans la collection \"associations\"\r\n      const associationRef = doc(db, \"associations\", associationId);\r\n      const associationSnapshot = await getDoc(associationRef);\r\n      if (!associationSnapshot.exists()) {\r\n        throw new Error(\"Association introuvable\");\r\n      }\r\n\r\n      // Vérifiez si l'utilisateur est déjà membre de l'association\r\n      const userAssociationsRef = collection(db, \"userAssociations\");\r\n      const querySnapshot = await getDocs(\r\n        query(\r\n          userAssociationsRef,\r\n          where(\"userId\", \"==\", userId),\r\n          where(\"associationId\", \"==\", associationId)\r\n        )\r\n      );\r\n      if (!querySnapshot.empty) {\r\n        throw new Error(\"L'utilisateur est déjà membre de cette association\");\r\n      }\r\n\r\n      // Ajoutez l'ID de l'association à la collection \"userAssociations\" de l'utilisateur\r\n      await addDoc(userAssociationsRef, { userId, associationId });\r\n\r\n      // Ajoutez le rôle de l'utilisateur à l'association\r\n      const newRole = { uid: userId, isAdmin: false };\r\n      const associationData = associationSnapshot.data();\r\n      associationData.role = [...associationData.role, newRole];\r\n\r\n      await updateDoc(associationRef, associationData);\r\n\r\n      // Récupérez les données de l'association\r\n      const updatedAssociationData = {\r\n        id: associationSnapshot.id,\r\n        ...associationData,\r\n      };\r\n\r\n      return updatedAssociationData;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\n/*\r\n * Add association profile image\r\n ***\r\n */\r\n\r\nexport const uploadImage = async (image) => {\r\n  try {\r\n    const storage = getStorage();\r\n    const storageRef = ref(storage, `images/${image.name}`);\r\n    await uploadBytes(storageRef, image);\r\n    const imageUrl = await getDownloadURL(storageRef);\r\n    return imageUrl;\r\n  } catch (error) {\r\n    throw new Error(\r\n      `Une erreur s'est produite lors du téléchargement de l'image : ${error.message}`\r\n    );\r\n  }\r\n};\r\n\r\n/*\r\n * Update animal image\r\n ***\r\n */\r\n\r\nexport const updateAssociationImage = createAsyncThunk(\r\n  \"animals/updateAssociationImage\",\r\n  async ({ associationId, image }, { rejectWithValue }) => {\r\n    try {\r\n      const imageUrl = await uploadImage(image);\r\n      const db = getFirestore();\r\n      const animalRef = doc(db, \"associations\", associationId);\r\n      await updateDoc(animalRef, { image: imageUrl });\r\n\r\n      return { associationId, imageUrl };\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\n/*\r\n * Modify user role\r\n ***\r\n */\r\n\r\nexport const changeUserRole = createAsyncThunk(\r\n  \"associations/changeUserRole\",\r\n  async ({ userId, associationId, newIsAdmin }, { rejectWithValue }) => {\r\n\r\n    console.log('INFORMATIONS CHANGE USER ROLE -> ')\r\n    console.log(userId, associationId, newIsAdmin)\r\n    console.log('----')\r\n    try {\r\n      const db = getFirestore();\r\n\r\n      // Vérifiez si l'utilisateur existe dans la collection \"users\"\r\n      const userRef = doc(db, \"users\", userId);\r\n      const userSnapshot = await getDoc(userRef);\r\n      if (!userSnapshot.exists()) {\r\n        throw new Error(\"Utilisateur introuvable\");\r\n      }\r\n\r\n      // Vérifiez si l'association existe dans la collection \"associations\"\r\n      const associationRef = doc(db, \"associations\", associationId);\r\n      const associationSnapshot = await getDoc(associationRef);\r\n      if (!associationSnapshot.exists()) {\r\n        throw new Error(\"Association introuvable\");\r\n      }\r\n\r\n      // Mettre à jour le rôle de l'utilisateur dans l'association\r\n      const associationData = associationSnapshot.data();\r\n      for (let role of associationData.role) {\r\n        if (role.uid === userId) {\r\n          role.isAdmin = newIsAdmin;\r\n          break;\r\n        }\r\n      }\r\n\r\n      await updateDoc(associationRef, associationData);\r\n\r\n      // Récupérez les données de l'association\r\n      const updatedAssociationData = {\r\n        id: associationSnapshot.id,\r\n        ...associationData,\r\n      };\r\n\r\n      return updatedAssociationData;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\n// export const getAssociation = createAsyncThunk<Association, string>(\r\n//   'associations/getAssociation',\r\n//   async (associationId: string | any , { rejectWithValue }) => {\r\n//     try {\r\n//       const db = getFirestore();\r\n//       const associationRef = doc(db, 'associations', associationId);\r\n//       const associationSnapshot = await getDoc(associationRef);\r\n\r\n//       if (!associationSnapshot.exists()) {\r\n//         throw new Error('Association not found');\r\n//       }\r\n\r\n//       const associationData = associationSnapshot.data();\r\n//       let isAdmin = false;\r\n\r\n//       if (Array.isArray(associationData.role)) {\r\n//         // Use your logic here to determine if a user is an admin\r\n//         // For example:\r\n//         // const { uid } = firebase.auth().currentUser;\r\n//         // isAdmin = associationData.role.some(role => role.uid === uid && role.isAdmin);\r\n//       }\r\n\r\n//       return { id: associationId, isAdmin, ...associationData };\r\n//     } catch (err) {\r\n//       return rejectWithValue(err.message || 'Unknown error');\r\n//     }\r\n//   }\r\n// );\r\n\r\nconst associationsSlice = createSlice({\r\n  name: \"associations\",\r\n  initialState: {\r\n    status: \"idle\",\r\n    data: [],\r\n    error: null,\r\n  } as AssociationState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchAssociations.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(\r\n        fetchAssociations.fulfilled,\r\n        (state, action: PayloadAction<Association[]>) => {\r\n          state.status = \"succeeded\";\r\n          state.data = action.payload;\r\n        }\r\n      )\r\n      .addCase(\r\n        fetchAssociations.rejected,\r\n        (state, action: PayloadAction<any>) => {\r\n          state.status = \"failed\";\r\n          state.error = action.payload;\r\n        }\r\n      )\r\n      .addCase(addAssociation.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(addAssociation.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.data.push(action.payload);\r\n      })\r\n      .addCase(addAssociation.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.payload;\r\n      })\r\n      .addCase(updateAssociation.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(updateAssociation.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        console.log('ouyai')\r\n        state.data = state.data.map((association) => {\r\n          if (association.id === action.payload.associationId) {\r\n            return { ...association, ...action.payload.associationData };\r\n          }\r\n          return association;\r\n        });\r\n        if (\r\n          state.selectedAssociation &&\r\n          state.selectedAssociation.id === action.payload.associationId\r\n        ) {\r\n          state.selectedAssociation = {\r\n            ...state.selectedAssociation,\r\n            ...action.payload.associationData,\r\n          };\r\n        }\r\n      })\r\n      .addCase(updateAssociation.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.payload;\r\n      });\r\n    builder\r\n      .addCase(joinAssociation.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(joinAssociation.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.data.push(action.payload);\r\n      })\r\n      .addCase(joinAssociation.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.payload;\r\n      });\r\n\r\n    builder\r\n    .addCase(changeUserRole.pending, (state) => {\r\n      state.status = \"loading\";\r\n    })\r\n    .addCase(changeUserRole.fulfilled, (state, action) => {\r\n      state.status = \"succeeded\";\r\n    \r\n      // Trouver l'index de l'association à mettre à jour dans le tableau\r\n      const index = state.data.findIndex(\r\n        (association) => association.id === action.payload.id\r\n      );\r\n    \r\n      if (index !== -1) {\r\n        // Remplacer l'association existante par la nouvelle\r\n        state.data[index] = action.payload;\r\n      }\r\n    })\r\n    .addCase(changeUserRole.rejected, (state, action) => {\r\n      state.status = \"failed\";\r\n      state.error = action.payload;\r\n    });\r\n\r\n    builder\r\n      .addCase(updateAssociationImage.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(updateAssociationImage.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        const { associationId, imageUrl } = action.payload;\r\n        const association = state.data.find(\r\n          (association) => association.id === associationId\r\n        );\r\n        if (association) {\r\n          association.image = imageUrl;\r\n        }\r\n        if (state.selectedAnimal && state.selectedAnimal.id === associationId) {\r\n          state.selectedAnimal.image = imageUrl;\r\n        }\r\n      })\r\n      .addCase(updateAssociationImage.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.payload;\r\n      });\r\n\r\n    builder.addCase(removeAssociation.pending, (state) => {\r\n      state.status = \"loading\";\r\n    });\r\n    builder\r\n      .addCase(removeAssociation.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        // remove the association from the state\r\n        state.data = state.data.filter(\r\n          (association) => association.id !== action.payload.id\r\n        );\r\n      })\r\n\r\n      .addCase(removeAssociation.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.payload;\r\n      });\r\n\r\n    // .addCase(getAssociation.pending, (state) => {\r\n    //   state.status = 'loading';\r\n    // })\r\n    // .addCase(getAssociation.fulfilled, (state, action: PayloadAction<Association>) => {\r\n    //   state.status = 'succeeded';\r\n    //   state.data = [action.payload]; // This will overwrite the entire list of associations with the single one that was fetched\r\n    //   console.log('DATA ASSOCIATION')\r\n    //   console.log(state.data)\r\n    // })\r\n    // .addCase(getAssociation.rejected, (state, action: PayloadAction<any>) => {\r\n    //   state.status = 'failed';\r\n    //   state.error = action.payload;\r\n    // });\r\n  },\r\n});\r\n\r\nexport default associationsSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}